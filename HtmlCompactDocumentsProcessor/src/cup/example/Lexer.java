/* The following code was generated by JFlex 1.3.5 on 1/19/22, 3:42 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 1/19/22, 3:42 PM from the specification file
 * <tt>file:/C:/Users/Razvan/Desktop/Facultate/Gramatici/HtmlCompactDocumentsProcessor/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\2\1\2\2\0\1\2\22\0\1\2\1\0\1\37\11\0"+
    "\1\2\1\41\1\0\1\20\12\0\2\0\1\4\1\36\1\3\2\0"+
    "\1\17\1\21\1\7\1\5\1\13\1\25\1\27\1\14\1\26\1\35"+
    "\1\30\1\16\1\15\1\23\1\6\1\12\1\31\1\22\1\24\1\10"+
    "\1\32\1\33\1\1\1\34\1\11\1\40\6\0\1\17\1\21\1\7"+
    "\1\5\1\13\1\25\1\27\1\14\1\26\1\35\1\30\1\16\1\15"+
    "\1\23\1\6\1\12\1\31\1\22\1\24\1\10\1\32\1\33\1\1"+
    "\1\34\1\11\1\40\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    34,    68,   102,   136,   170,   204,   238,   272,   306, 
      340,   374,   408,   442,   476,   510,   544,   578,   612,   646, 
      680,   714,   748,   782,   816,   850,   884,   918,   952,   986, 
     1020,  1054,  1088,  1122,  1156,  1190,  1224,  1258,  1292,  1326, 
     1360,    68,  1394,  1428,  1462,  1496,  1530,  1564,  1598,  1632, 
     1666,  1700,  1734,  1768,  1802,  1836,  1870,  1904,  1938,  1972, 
     2006,  2040,  2074,  2108,  2142,  2176,  2210,  2244,  2278,  2312, 
     2346,  2380,  2414,  2448,  2482,  2516,  2550,  2584,  2618,  2652, 
     2686,  2720,  2754,  2788,   748,    68,  2822,    68,    68,  2856, 
       68,  2890,  2924,  2958,    68,  2992,  3026,  3060,  3094,  3128, 
       68,    68,  3162,  3196,  3230,  3264,    68,  3298,  3332,  3366, 
     3400,  3434,    68,  3468,  3502,    68,    68,  3536,  3570,  3604, 
     3638,  3672,  3706,  3740,  3774,  3808,  3842,  3876,  3910,  3944, 
     3978,  4012,  4046,  4080,  4114,  4148,  4182,  4216,  4250,  4284, 
     4318,  4352,  4386,  4420,  4454,  4488,  4522,  4556,  4590,  4624, 
     4658,    68,  4692,  4726,  4760,  4794,  4828,  4862,  4896,  4930, 
     4964,  4998,  5032,  5066,  5100,  5134,  5168,  5202,  5236,  5270, 
     5304,    68,  5338,  5372,  5406,  5440,  5474,  5508,  5542,  5576, 
     5610,  5644,  5678,  5712,  5746,  5780,  5814,  5848,  5882,  5916, 
     5950,  5984,  6018,  6052,  6086,  6120,  6154,  6188,  6222,  6256, 
     6290,  6324,  6358,  6392,  6426,  6460,  6494,  6528,  6562,  6596, 
     6630,  6664,  6698,  6732,  6766,  6800,  6834,  6868,  6902,  6936, 
     6970,    68,    68,    68,    68,  7004,  7038,  7072,  7106,  7140, 
     7174,  7208,  7242,  7276,  7310,  7344,  7378,  7412,  7446,  7480, 
       68,  7514,  7548,  7582,  7616,    68,  7650,  7684,  7718,  7752, 
     7786,  7820,  7854,  7888,  7922,  7956,  7990,  8024,  8058,  8092, 
     8126,  8160,  8194,  8228,  8262,  8296,  8330,  8364,  8398,  8432, 
     8466,  8500,  8534,  8568,  8602,  8636,  8670,    68,  8704,  8738, 
     8772,  8806,  8840,  8874,  8908,  8942,  8976,  9010,  9044,  9078, 
     9112,    68,  9146,  9180,  9214,  9248,  9282,    68,  9316,  9350, 
     9384,  9418,  9452,  9486,  9520,  9554,  9588,    68,  9622,  9656, 
     9690,  9724,  9758,  9792,  9826,  9860,  9894,  9928,    68,  9962, 
     9996, 10030, 10064, 10098,    68,    68, 10132, 10166, 10200,    68, 
    10234, 10268, 10302,    68, 10336, 10370, 10404, 10438, 10472, 10506, 
    10540, 10574, 10608, 10642, 10676,    68,    68, 10710, 10744, 10778, 
    10812,    68, 10846,    68, 10880, 10914,    68,    68,    68, 10948, 
    10982, 11016, 11050, 11084, 11118, 11152, 11186, 11220, 11254, 11288, 
    11322, 11356, 11390, 11424, 11458, 11492, 11526, 11560, 11594, 11628, 
    11662, 11696, 11730, 11764, 11798, 11832, 11866, 11900, 11934, 11968, 
    12002, 12036, 12070, 12104, 12138, 12172, 12206, 12240, 12274, 12308, 
    12342, 12376, 12410, 12444, 12478, 12512, 12546, 12580, 12614, 12648, 
    12682, 12716,    68, 12750, 12784, 12818,    68, 12852, 12886, 12920, 
    12954, 12988, 13022, 13056, 13090,    68,    68,    68,    68, 13124, 
    13158,    68, 13192, 13226, 13260, 13294,    68,    68,    68,    68, 
    13328,    68, 13362, 13396, 13430, 13464,    68, 13498, 13532, 13566, 
    13600, 13634, 13668,    68,    68, 13702,    68, 13736, 13770, 13804, 
       68, 13838, 13872, 13906, 13940, 13974,    68, 14008, 14042,    68, 
       68, 14076, 14110, 14144, 14178, 14212,    68, 14246, 14280, 14314, 
    14348, 14382, 14416, 14450, 14484, 14518, 14552, 14586,    68, 14620, 
    14654, 14688, 14722, 14756, 14790, 14824, 14858, 14892, 14926, 14960, 
    14994, 15028, 15062, 15096, 15130, 15164, 15198, 15232, 15266, 15300, 
    15334, 15368, 15402,    68, 15436, 15470,    68, 15504, 15538, 15572, 
    15606, 15640, 15674, 15708, 15742, 15776, 15810,    68, 15844, 15878, 
       68,    68,    68, 15912, 15946, 15980, 16014, 16048, 16082, 16116, 
    16150, 16184, 16218, 16252, 16286, 16320, 16354, 16388, 16422, 16456, 
    16490, 16524, 16558, 16592, 16626, 16660, 16694, 16728, 16762, 16796, 
    16830, 16864, 16898, 16932, 16966, 17000, 17034, 17068, 17102, 17136, 
    17170, 17204, 17238, 17272, 17306, 17340, 17374, 17408, 17442, 17476, 
    17510,    68, 17544, 17578, 17612, 17646, 17680, 17714, 17748, 17782, 
    17816, 17850, 17884, 17918, 17952, 17986, 18020, 18054,    68,    68, 
       68,    68,    68, 18088,    68, 18122,    68, 18156, 18190, 18224, 
    18258,    68,    68,    68,    68, 18292, 18326, 18360, 18394,    68, 
    18428, 18462, 18496, 18530, 18564, 18598, 18632, 18666, 18700, 18734, 
    18768, 18802,    68, 18836, 18870, 18904, 18938,    68, 18972, 19006, 
    19040, 19074, 19108, 19142, 19176, 19210, 19244,    68, 19278, 19312, 
    19346,    68, 19380, 19414, 19448, 19482, 19516, 19550, 19584, 19618, 
    19652, 19686, 19720, 19754,    68,    68, 19788, 19822, 19856, 19890, 
       68, 19924,    68, 19958, 19992,    68,    68,    68, 20026, 20060, 
    20094, 20128, 20162, 20196, 20230,    68, 20264, 20298, 20332,    68, 
    20366, 20400,    68, 20434, 20468, 20502, 20536, 20570, 20604, 20638, 
    20672, 20706, 20740, 20774, 20808, 20842, 20876, 20910, 20944, 20978, 
    21012, 21046, 21080, 21114, 21148, 21182, 21216, 21250, 21284,    68, 
    21318, 21352, 21386, 21420, 21454, 21488, 21522,    68,    68, 21556, 
    21590, 21624, 21658, 21692, 21726, 21760,    68, 21794, 21828,    68, 
    21862, 21896, 21930, 21964, 21998, 22032, 22066,    68, 22100,    68, 
    22134,    68, 22168, 22202, 22236,    68, 22270, 22304, 22338,    68, 
    22372, 22406, 22440,    68, 22474, 22508, 22542,    68, 22576, 22610, 
    22644, 22678, 22712, 22746, 22780, 22814,    68,    68,    68,    68, 
    22848, 22882,    68, 22916, 22950, 22984, 23018,    68,    68,    68, 
    23052,    68, 23086, 23120, 23154, 23188, 23222, 23256, 23290, 23324, 
    23358,    68, 23392, 23426,    68,    68,    68, 23460, 23494, 23528, 
    23562, 23596, 23630, 23664,    68, 23698, 23732,    68,    68,    68, 
       68,    68, 23766, 23800, 23834,    68, 23868, 23902, 23936, 23970, 
       68, 24004, 24038, 24072, 24106, 24140,    68,    68, 24174, 24208, 
    24242, 24276, 24310,    68, 24344, 24378, 24412, 24446, 24480,    68, 
    24514, 24548, 24582, 24616, 24650, 24684, 24718,    68, 24752, 24786, 
    24820,    68, 24854, 24888, 24922,    68, 24956, 24990, 25024, 25058, 
    25092, 25126, 25160,    68, 25194, 25228,    68, 25262, 25296,    68, 
       68,    68, 25330, 25364, 25398, 25432, 25466, 25500, 25534,    68, 
       68,    68,    68,    68, 25568,    68, 25602,    68, 25636, 25670, 
    25704, 25738, 25772, 25806, 25840, 25874, 25908, 25942, 25976,    68, 
    26010, 26044, 26078,    68,    68, 26112, 26146,    68, 26180, 26214, 
    26248, 26282, 26316, 26350, 26384, 26418,    68, 26452, 26486,    68, 
    26520, 26554, 26588, 26622, 26656,    68,    68, 26690, 26724, 26758, 
    26792, 26826, 26860, 26894, 26928, 26962, 26996,    68,    68, 27030, 
    27064, 27098, 27132, 27166, 27200, 27234,    68, 27268,    68,    68, 
    27302, 27336,    68, 27370,    68, 27404,    68,    68,    68, 27438, 
       68, 27472,    68, 27506,    68, 27540, 27574, 27608,    68, 27642, 
    27676, 27710,    68, 27744, 27778,    68, 27812, 27846,    68,    68, 
       68,    68,    68, 27880, 27914, 27948,    68, 27982, 28016,    68, 
       68,    68,    68,    68, 28050, 28084, 28118, 28152, 28186, 28220, 
       68, 28254, 28288,    68,    68, 28322,    68, 28356, 28390,    68, 
       68, 28424, 28458, 28492,    68,    68, 28526, 28560,    68, 28594, 
       68,    68,    68, 28628, 28662,    68, 28696, 28730,    68,    68, 
       68, 28764, 28798, 28832, 28866, 28900, 28934,    68, 28968,    68, 
       68,    68,    68, 29002, 29036,    68,    68, 29070,    68, 29104, 
    29138, 29172,    68,    68,    68, 29206,    68,    68,    68,    68, 
    29240, 29274,    68,    68,    68,    68,    68,    68, 29308, 29342, 
    29376, 29410,    68, 29444,    68,    68, 29478, 29512, 29546, 29580, 
       68, 29614,    68, 29648, 29682,    68,    68,    68,    68
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\2\3\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\1\3\1\24\3\3\1\25"+
    "\1\26\3\3\1\27\44\3\70\0\1\30\15\0\1\5"+
    "\37\0\4\6\1\0\35\6\5\0\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\0\1\45\1\46\1\47\1\50\1\0"+
    "\1\51\1\52\1\53\1\54\1\55\13\0\1\56\4\0"+
    "\1\57\1\60\1\0\1\61\34\0\1\62\1\0\1\63"+
    "\12\0\1\64\35\0\1\65\42\0\1\66\26\0\1\67"+
    "\2\0\1\70\6\0\1\71\1\0\1\72\30\0\1\73"+
    "\3\0\1\74\12\0\1\75\35\0\1\76\22\0\1\77"+
    "\6\0\1\100\31\0\1\101\10\0\1\102\7\0\1\103"+
    "\20\0\1\104\4\0\1\105\34\0\1\106\10\0\1\107"+
    "\32\0\1\110\2\0\1\111\1\112\5\0\1\113\3\0"+
    "\1\114\20\0\1\115\16\0\1\116\37\0\1\117\1\0"+
    "\1\120\30\0\1\121\2\0\1\122\1\123\4\0\1\124"+
    "\15\0\37\125\1\126\2\125\5\0\1\127\41\0\1\130"+
    "\2\0\1\131\2\0\1\132\2\0\1\133\6\0\1\134"+
    "\1\135\25\0\1\136\3\0\1\137\2\0\1\140\26\0"+
    "\1\141\4\0\1\142\3\0\1\143\6\0\1\144\20\0"+
    "\1\145\2\0\1\146\2\0\1\147\1\150\2\0\1\151"+
    "\1\0\1\152\1\153\2\0\1\154\1\155\31\0\1\156"+
    "\1\157\2\0\1\160\34\0\1\161\34\0\1\162\2\0"+
    "\1\163\6\0\1\164\1\165\31\0\1\166\3\0\1\167"+
    "\35\0\1\170\3\0\1\171\6\0\1\172\20\0\1\173"+
    "\1\0\1\174\2\0\1\175\6\0\1\176\1\177\24\0"+
    "\1\200\1\201\1\202\1\203\1\0\1\204\1\205\1\206"+
    "\1\207\1\210\1\211\1\0\1\212\1\0\1\213\1\214"+
    "\1\215\1\216\1\0\1\217\1\220\1\221\1\222\1\223"+
    "\12\0\1\224\1\225\7\0\1\226\1\227\2\0\1\230"+
    "\3\0\1\231\3\0\1\232\15\0\1\233\4\0\1\234"+
    "\35\0\1\235\1\236\1\0\1\237\1\240\1\0\1\241"+
    "\1\0\1\242\12\0\1\243\15\0\1\244\13\0\1\245"+
    "\3\0\1\246\30\0\1\247\5\0\1\250\1\251\1\252"+
    "\35\0\1\253\36\0\1\254\42\0\1\255\37\0\1\256"+
    "\32\0\1\257\6\0\1\260\1\261\4\0\1\262\34\0"+
    "\1\263\36\0\1\264\41\0\1\265\40\0\1\266\63\0"+
    "\1\267\15\0\1\270\37\0\1\271\42\0\1\272\42\0"+
    "\1\273\57\0\1\274\26\0\1\275\40\0\1\276\37\0"+
    "\1\277\65\0\1\300\23\0\1\301\46\0\1\302\26\0"+
    "\1\303\41\0\1\304\15\0\1\305\35\0\1\306\26\0"+
    "\1\307\41\0\1\310\33\0\1\311\56\0\1\312\14\0"+
    "\1\313\7\0\1\314\12\0\1\315\7\0\1\316\32\0"+
    "\1\317\43\0\1\320\40\0\1\321\42\0\1\322\31\0"+
    "\1\323\72\0\1\324\37\0\1\325\20\0\1\326\47\0"+
    "\1\327\31\0\1\330\50\0\1\331\45\0\1\332\31\0"+
    "\1\333\35\0\1\334\37\0\1\335\47\0\1\336\46\0"+
    "\1\337\40\0\1\340\10\0\1\341\16\0\1\342\66\0"+
    "\1\343\11\0\1\344\10\0\1\345\46\0\1\346\30\0"+
    "\1\347\37\0\1\350\65\0\1\351\20\0\1\352\47\0"+
    "\1\353\26\0\1\354\41\0\1\355\43\0\1\356\50\0"+
    "\1\357\44\0\1\360\32\0\1\361\43\0\1\362\43\0"+
    "\1\363\32\0\1\364\12\0\1\365\30\0\1\366\56\0"+
    "\1\367\33\0\1\370\43\0\1\371\1\372\22\0\1\373"+
    "\56\0\1\374\31\0\1\375\50\0\1\376\33\0\1\377"+
    "\33\0\1\u0100\2\0\1\u0101\2\0\1\u0102\2\0\1\u0103"+
    "\6\0\1\u0104\1\u0105\25\0\1\u0106\3\0\1\u0107\2\0"+
    "\1\u0108\26\0\1\u0109\4\0\1\u010a\3\0\1\u010b\6\0"+
    "\1\u010c\20\0\1\u010d\2\0\1\u010e\2\0\1\u010f\1\u0110"+
    "\2\0\1\u0111\1\0\1\u0112\1\u0113\2\0\1\u0114\1\u0115"+
    "\16\0\1\u0116\12\0\1\u0117\1\u0118\2\0\1\u0119\34\0"+
    "\1\u011a\34\0\1\u011b\2\0\1\u011c\6\0\1\u011d\1\u011e"+
    "\31\0\1\u011f\3\0\1\u0120\35\0\1\u0121\3\0\1\u0122"+
    "\6\0\1\u0123\16\0\1\u0124\1\0\1\u0125\1\0\1\u0126"+
    "\2\0\1\u0127\6\0\1\u0128\1\u0129\22\0\1\u012a\1\0"+
    "\1\u012b\1\u012c\7\0\1\u012d\1\u012e\2\0\1\u012f\3\0"+
    "\1\u0130\3\0\1\u0131\15\0\1\u0132\4\0\1\u0133\31\0"+
    "\1\u0134\3\0\1\u0135\1\u0136\1\0\1\u0137\1\u0138\1\0"+
    "\1\u0139\1\0\1\u013a\12\0\1\u013b\15\0\1\u013c\13\0"+
    "\1\u013d\3\0\1\u013e\16\0\1\u013f\11\0\1\u0140\5\0"+
    "\1\u0141\1\u0142\1\u0143\35\0\1\u0144\23\0\1\u0145\41\0"+
    "\1\u0146\12\0\1\u0147\42\0\1\u0148\37\0\1\u0149\32\0"+
    "\1\u014a\40\0\1\u014b\42\0\1\u014c\57\0\1\u014d\44\0"+
    "\1\u014e\22\0\1\u014f\55\0\1\u0150\1\u0151\50\0\1\u0152"+
    "\27\0\1\u0153\30\0\1\u0154\10\0\1\u0155\36\0\1\u0156"+
    "\40\0\1\u0157\42\0\1\u0158\37\0\1\u0159\36\0\1\u015a"+
    "\6\0\1\u015b\42\0\1\u015c\1\u015d\35\0\1\u015e\35\0"+
    "\1\u015f\55\0\1\u0160\24\0\1\u0161\11\0\1\u0162\43\0"+
    "\1\u0163\35\0\1\u0164\24\0\1\u0165\56\0\1\u0166\31\0"+
    "\1\u0167\51\0\1\u0168\31\0\1\u0169\35\0\1\u016a\15\0"+
    "\1\u016b\25\0\1\u016c\47\0\1\u016d\32\0\1\u016e\51\0"+
    "\1\u016f\35\0\1\u0170\36\0\1\u0171\47\0\1\u0172\40\0"+
    "\1\u0173\34\0\1\u0174\43\0\1\u0175\56\0\1\u0176\37\0"+
    "\1\u0177\33\0\1\u0178\36\0\1\u0179\43\0\1\u017a\33\0"+
    "\1\u017b\61\0\1\u017c\37\0\1\u017d\51\0\1\u017e\26\0"+
    "\1\u017f\3\0\1\u0180\17\0\1\u0181\64\0\1\u0182\17\0"+
    "\1\u0183\57\0\1\u0184\53\0\1\u0185\41\0\1\u0186\25\0"+
    "\1\u0187\41\0\1\u0188\33\0\1\u0189\40\0\1\u018a\50\0"+
    "\1\u018b\32\0\1\u018c\40\0\1\u018d\65\0\1\u018e\16\0"+
    "\1\u018f\65\0\1\u0190\21\0\1\u0191\60\0\1\u0192\20\0"+
    "\1\u0193\50\0\1\u0194\40\0\1\u0195\44\0\1\u0196\3\0"+
    "\1\u0197\26\0\1\u0198\36\0\1\u0199\53\0\1\u019a\1\u019b"+
    "\25\0\1\u019c\41\0\1\u019d\55\0\1\u019e\22\0\1\u019f"+
    "\41\0\1\u01a0\44\0\1\u01a1\36\0\1\u01a2\50\0\1\u01a3"+
    "\40\0\1\u01a4\30\0\1\u01a5\42\0\1\u01a6\51\0\1\u01a7"+
    "\51\0\1\u01a8\32\0\1\u01a9\40\0\1\u01aa\30\0\1\u01ab"+
    "\53\0\1\u01ac\54\0\1\u01ad\22\0\1\u01ae\41\0\1\u01af"+
    "\56\0\1\u01b0\21\0\1\u01b1\53\0\1\u01b2\25\0\1\u01b3"+
    "\51\0\1\u01b4\45\0\1\u01b5\36\0\1\u01b6\25\0\1\u01b7"+
    "\41\0\1\u01b8\54\0\1\u01b9\26\0\1\u01ba\61\0\1\u01bb"+
    "\40\0\1\u01bc\10\0\1\u01bd\16\0\1\u01be\34\0\1\u01bf"+
    "\73\0\1\u01c0\11\0\1\u01c1\10\0\1\u01c2\46\0\1\u01c3"+
    "\30\0\1\u01c4\37\0\1\u01c5\34\0\1\u01c6\41\0\1\u01c7"+
    "\72\0\1\u01c8\10\0\1\u01c9\7\0\1\u01ca\47\0\1\u01cb"+
    "\26\0\1\u01cc\36\0\1\u01cd\44\0\1\u01ce\43\0\1\u01cf"+
    "\50\0\1\u01d0\44\0\1\u01d1\32\0\1\u01d2\31\0\1\u01d3"+
    "\53\0\1\u01d4\43\0\1\u01d5\25\0\1\u01d6\41\0\1\u01d7"+
    "\46\0\1\u01d8\12\0\1\u01d9\30\0\1\u01da\56\0\1\u01db"+
    "\33\0\1\u01dc\23\0\1\u01dd\17\0\1\u01de\1\u01df\22\0"+
    "\1\u01e0\56\0\1\u01e1\31\0\1\u01e2\50\0\1\u01e3\33\0"+
    "\1\u01e4\34\0\1\u01e5\40\0\1\u01e6\42\0\1\u01e7\57\0"+
    "\1\u01e8\20\0\1\u01e9\65\0\1\u01ea\22\0\1\u01eb\55\0"+
    "\1\u01ec\1\u01ed\50\0\1\u01ee\27\0\1\u01ef\30\0\1\u01f0"+
    "\10\0\1\u01f1\36\0\1\u01f2\40\0\1\u01f3\42\0\1\u01f4"+
    "\37\0\1\u01f5\36\0\1\u01f6\6\0\1\u01f7\42\0\1\u01f8"+
    "\1\u01f9\35\0\1\u01fa\35\0\1\u01fb\55\0\1\u01fc\24\0"+
    "\1\u01fd\11\0\1\u01fe\43\0\1\u01ff\35\0\1\u0200\24\0"+
    "\1\u0201\37\0\1\u0202\60\0\1\u0203\31\0\1\u0204\40\0"+
    "\1\u0205\37\0\1\u0206\45\0\1\u0207\36\0\1\u0208\40\0"+
    "\1\u0209\54\0\1\u020a\27\0\1\u020b\57\0\1\u020c\31\0"+
    "\1\u020d\31\0\1\u020e\17\0\1\u020f\36\0\1\u0210\31\0"+
    "\1\u0211\44\0\1\u0212\35\0\1\u0213\44\0\1\u0214\34\0"+
    "\1\u0215\46\0\1\u0216\42\0\1\u0217\55\0\1\u0218\32\0"+
    "\1\u0219\35\0\1\u021a\27\0\1\u021b\53\0\1\u021c\44\0"+
    "\1\u021d\31\0\1\u021e\23\0\1\u021f\16\0\1\u0220\40\0"+
    "\1\u0221\11\0\1\u0222\45\0\1\u0223\33\0\1\u0224\55\0"+
    "\1\u0225\41\0\1\u0226\16\0\1\u0227\40\0\1\u0228\40\0"+
    "\1\u0229\71\0\1\u022a\14\0\1\u022b\63\0\1\u022c\12\0"+
    "\1\u022d\40\0\1\u022e\46\0\1\u022f\54\0\1\u0230\51\0"+
    "\1\u0231\11\0\1\u0232\72\0\1\u0233\32\0\1\u0234\34\0"+
    "\1\u0235\31\0\1\u0236\55\0\1\u0237\30\0\1\u0238\35\0"+
    "\1\u0239\23\0\1\u023a\42\0\1\u023b\41\0\1\u023c\21\0"+
    "\1\u023d\35\0\1\u023e\45\0\1\u023f\60\0\1\u0240\13\0"+
    "\1\u0241\40\0\1\u0242\45\0\1\u0243\65\0\1\u0244\40\0"+
    "\1\u0245\3\0\37\u0190\1\u0246\2\u0190\12\0\1\u0247\66\0"+
    "\1\u0248\21\0\1\u0249\50\0\1\u024a\43\0\1\u024b\40\0"+
    "\1\u024c\25\0\1\u024d\35\0\1\u024e\70\0\1\u024f\11\0"+
    "\1\u0250\55\0\1\u0251\26\0\1\u0252\54\0\1\u0253\32\0"+
    "\1\u0254\54\0\1\u0255\32\0\1\u0256\27\0\1\u0257\47\0"+
    "\1\u0258\37\0\1\u0259\40\0\1\u025a\44\0\1\u025b\51\0"+
    "\1\u025c\33\0\1\u025d\47\0\1\u025e\34\0\1\u025f\51\0"+
    "\1\u0260\26\0\1\u0261\51\0\1\u0262\31\0\1\u0263\31\0"+
    "\1\u0264\41\0\1\u0265\41\0\1\u0266\41\0\1\u0267\64\0"+
    "\1\u0268\1\u0269\25\0\1\u026a\41\0\1\u026b\31\0\1\u026c"+
    "\23\0\1\u026d\22\0\1\u026e\41\0\1\u026f\44\0\1\u0270"+
    "\36\0\1\u0271\50\0\1\u0272\40\0\1\u0273\30\0\1\u0274"+
    "\42\0\1\u0275\51\0\1\u0276\51\0\1\u0277\32\0\1\u0278"+
    "\25\0\1\u0279\54\0\1\u027a\30\0\1\u027b\53\0\1\u027c"+
    "\54\0\1\u027d\12\0\1\u027e\51\0\1\u027f\41\0\1\u0280"+
    "\56\0\1\u0281\21\0\1\u0282\53\0\1\u0283\25\0\1\u0284"+
    "\51\0\1\u0285\45\0\1\u0286\36\0\1\u0287\25\0\1\u0288"+
    "\47\0\1\u0289\37\0\1\u028a\45\0\1\u028b\31\0\1\u028c"+
    "\46\0\1\u028d\40\0\1\u028e\54\0\1\u028f\27\0\1\u0290"+
    "\57\0\1\u0291\31\0\1\u0292\31\0\1\u0293\17\0\1\u0294"+
    "\36\0\1\u0295\31\0\1\u0296\44\0\1\u0297\35\0\1\u0298"+
    "\32\0\1\u0299\41\0\1\u029a\53\0\1\u029b\34\0\1\u029c"+
    "\46\0\1\u029d\42\0\1\u029e\26\0\1\u029f\70\0\1\u02a0"+
    "\12\0\1\u02a1\61\0\1\u02a2\35\0\1\u02a3\25\0\1\u02a4"+
    "\41\0\1\u02a5\41\0\1\u02a6\66\0\1\u02a7\36\0\1\u02a8"+
    "\22\0\1\u02a9\55\0\1\u02aa\36\0\1\u02ab\50\0\1\u02ac"+
    "\25\0\1\u02ad\42\0\1\u02ae\51\0\1\u02af\46\0\1\u02b0"+
    "\20\0\1\u02b1\50\0\1\u02b2\36\0\1\u02b3\33\0\1\u02b4"+
    "\44\0\1\u02b5\36\0\1\u02b6\51\0\1\u02b7\50\0\1\u02b8"+
    "\24\0\1\u02b9\70\0\1\u02ba\22\0\1\u02bb\61\0\1\u02bc"+
    "\25\0\1\u02bd\35\0\1\u02be\34\0\1\u02bf\42\0\1\u02c0"+
    "\64\0\1\u02c1\42\0\1\u02c2\41\0\1\u02c3\40\0\1\u02c4"+
    "\13\0\1\u02c5\43\0\1\u02c6\42\0\1\u02c7\36\0\1\u02c8"+
    "\70\0\1\u02c9\15\0\1\u02ca\33\0\1\u02cb\57\0\1\u02cc"+
    "\30\0\1\u02cd\66\0\1\u02ce\25\0\1\u02cf\16\0\37\u0233"+
    "\1\u02d0\2\u0233\36\0\1\u02d1\41\0\1\u02d2\25\0\1\u02d3"+
    "\41\0\1\u02d4\25\0\1\u02d5\52\0\1\u02d6\61\0\1\u02d7"+
    "\2\0\37\u023b\1\u02d8\2\u023b\37\u023c\1\u02d9\2\u023c\12\0"+
    "\1\u02da\54\0\1\u02db\21\0\1\u02dc\73\0\1\u02dd\40\0"+
    "\1\u02de\13\0\1\u02df\67\0\1\u02e0\3\0\37\u0244\1\u02e1"+
    "\2\u0244\37\0\1\u02e2\40\0\1\u02e3\3\0\37\u0248\1\u02e4"+
    "\2\u0248\12\0\1\u02e5\35\0\1\u02e6\71\0\1\u02e7\26\0"+
    "\1\u02e8\54\0\1\u02e9\16\0\1\u02ea\65\0\1\u02eb\25\0"+
    "\1\u02ec\24\0\1\u02ed\43\0\1\u02ee\37\0\1\u02ef\55\0"+
    "\1\u02f0\25\0\1\u02f1\55\0\1\u02f2\27\0\1\u02f3\36\0"+
    "\1\u02f4\57\0\1\u02f5\42\0\1\u02f6\26\0\1\u02f7\40\0"+
    "\1\u02f8\37\0\1\u02f9\55\0\1\u02fa\26\0\1\u02fb\35\0"+
    "\1\u02fc\60\0\1\u02fd\32\0\1\u02fe\54\0\1\u02ff\16\0"+
    "\1\u0300\55\0\1\u0301\27\0\1\u0302\47\0\1\u0303\37\0"+
    "\1\u0304\40\0\1\u0305\44\0\1\u0306\51\0\1\u0307\33\0"+
    "\1\u0308\27\0\1\u0309\41\0\1\u030a\41\0\1\u030b\41\0"+
    "\1\u030c\61\0\1\u030d\34\0\1\u030e\26\0\1\u030f\64\0"+
    "\1\u0310\26\0\1\u0311\51\0\1\u0312\31\0\1\u0313\31\0"+
    "\1\u0314\41\0\1\u0315\41\0\1\u0316\66\0\1\u0317\14\0"+
    "\1\u0318\21\0\1\u0319\22\0\1\u031a\55\0\1\u031b\36\0"+
    "\1\u031c\50\0\1\u031d\25\0\1\u031e\42\0\1\u031f\51\0"+
    "\1\u0320\46\0\1\u0321\14\0\1\u0322\45\0\1\u0323\50\0"+
    "\1\u0324\26\0\1\u0325\41\0\1\u0326\41\0\1\u0327\51\0"+
    "\1\u0328\33\0\1\u0329\44\0\1\u032a\36\0\1\u032b\51\0"+
    "\1\u032c\55\0\1\u032d\16\0\1\u032e\56\0\1\u032f\44\0"+
    "\1\u0330\26\0\1\u0331\1\0\1\u0331\31\0\1\u0332\44\0"+
    "\1\u0333\60\0\1\u0334\25\0\1\u0335\36\0\1\u0336\55\0"+
    "\1\u0337\41\0\1\u0338\30\0\1\u0339\41\0\1\u033a\64\0"+
    "\1\u033b\13\0\1\u033c\70\0\1\u033d\25\0\1\u033e\16\0"+
    "\37\u02bc\1\u033f\2\u02bc\10\0\1\u0340\36\0\1\u0341\53\0"+
    "\1\u0342\27\0\1\u0343\73\0\1\u0344\2\0\37\u02c2\1\u0345"+
    "\2\u02c2\37\u02c3\1\u0346\2\u02c3\37\0\1\u0347\40\0\1\u0348"+
    "\16\0\1\u0349\57\0\1\u034a\46\0\1\u034b\3\0\37\u02c9"+
    "\1\u034c\2\u02c9\36\0\1\u034d\27\0\1\u034e\11\0\1\u034f"+
    "\32\0\1\u0350\30\0\1\u0351\23\0\37\u02ce\1\u0352\2\u02ce"+
    "\36\0\1\u0353\42\0\1\u0354\41\0\1\u0355\40\0\1\u0356"+
    "\11\0\1\u0357\55\0\1\u0358\42\0\1\u0359\16\0\37\u02d7"+
    "\1\u035a\2\u02d7\36\0\1\u035b\41\0\1\u035c\16\0\1\u035d"+
    "\26\0\37\u02dd\1\u035e\2\u02dd\37\0\1\u035f\15\0\1\u0360"+
    "\65\0\1\u0361\2\0\37\u02e2\1\u0362\2\u02e2\37\0\1\u0363"+
    "\40\0\1\u0364\26\0\1\u0365\55\0\1\u0366\40\0\1\u0367"+
    "\42\0\1\u0368\40\0\1\u0369\3\0\37\u02eb\1\u036a\2\u02eb"+
    "\32\0\1\u036b\41\0\1\u036c\32\0\1\u036d\31\0\1\u036e"+
    "\41\0\1\u036f\55\0\1\u0370\36\0\1\u0371\32\0\1\u0372"+
    "\47\0\1\u0373\24\0\1\u0374\43\0\1\u0375\37\0\1\u0376"+
    "\55\0\1\u0377\25\0\1\u0378\55\0\1\u0379\22\0\1\u037a"+
    "\41\0\1\u037b\41\0\1\u037c\41\0\1\u037d\41\0\1\u037e"+
    "\46\0\1\u037f\34\0\1\u0380\43\0\1\u0381\37\0\1\u0382"+
    "\61\0\1\u0383\42\0\1\u0384\26\0\1\u0385\40\0\1\u0386"+
    "\62\0\1\u0387\16\0\1\u0388\56\0\1\u0389\44\0\1\u038a"+
    "\26\0\1\u038b\1\0\1\u038b\31\0\1\u038c\44\0\1\u038d"+
    "\34\0\1\u038e\65\0\1\u038f\25\0\1\u0390\36\0\1\u0391"+
    "\34\0\1\u0392\41\0\1\u0393\20\0\1\u0394\41\0\1\u0395"+
    "\20\0\1\u0396\51\0\1\u0397\41\0\1\u0398\60\0\1\u0399"+
    "\32\0\1\u039a\30\0\1\u039b\42\0\1\u039c\41\0\1\u039d"+
    "\41\0\1\u039e\62\0\1\u039f\44\0\1\u03a0\40\0\1\u03a1"+
    "\3\0\37\u033d\1\u03a2\2\u033d\36\0\1\u03a3\41\0\1\u03a4"+
    "\10\0\1\u03a5\43\0\1\u03a6\70\0\1\u03a7\3\0\37\u0344"+
    "\1\u03a8\2\u0344\37\u0347\1\u03a9\2\u0347\37\0\1\u03aa\40\0"+
    "\1\u03ab\35\0\1\u03ac\46\0\1\u03ad\41\0\1\u03ae\40\0"+
    "\1\u03af\42\0\1\u03b0\12\0\1\u03b1\44\0\1\u03b2\65\0"+
    "\1\u03b3\2\0\37\u0354\1\u03b4\2\u0354\37\u0355\1\u03b5\2\u0355"+
    "\37\0\1\u03b6\34\0\1\u03b7\45\0\1\u03b8\41\0\1\u03b9"+
    "\42\0\1\u03ba\41\0\1\u03bb\40\0\1\u03bc\3\0\37\u035f"+
    "\1\u03bd\2\u035f\5\0\1\u03be\34\0\37\u0361\1\u03bf\2\u0361"+
    "\37\u0363\1\u03c0\2\u0363\37\0\1\u03c1\40\0\1\u03c2\3\0"+
    "\37\u0366\1\u03c3\2\u0366\37\0\1\u03c4\2\0\37\u0368\1\u03c5"+
    "\2\u0368\37\0\1\u03c6\14\0\1\u03c7\41\0\1\u03c8\46\0"+
    "\1\u03c9\56\0\1\u03ca\10\0\1\u03cb\70\0\1\u03cc\12\0"+
    "\1\u03cd\70\0\1\u03ce\12\0\1\u03cf\61\0\1\u03d0\31\0"+
    "\1\u03d1\41\0\1\u03d2\31\0\1\u03d3\65\0\1\u03d4\36\0"+
    "\1\u03d5\32\0\1\u03d6\27\0\1\u03d7\70\0\1\u03d8\32\0"+
    "\1\u03d9\21\0\1\u03da\50\0\1\u03db\42\0\1\u03dc\31\0"+
    "\1\u03dd\41\0\1\u03de\41\0\1\u03df\41\0\1\u03e0\41\0"+
    "\1\u03e1\51\0\1\u03e2\41\0\1\u03e3\62\0\1\u03e4\10\0"+
    "\1\u03e5\44\0\1\u03e6\43\0\1\u03e7\41\0\1\u03e8\55\0"+
    "\1\u03e9\25\0\1\u03ea\41\0\1\u03eb\31\0\37\u03a0\1\u03ec"+
    "\2\u03a0\37\0\1\u03ed\41\0\1\u03ee\41\0\1\u03ef\30\0"+
    "\1\u03f0\41\0\1\u03f1\52\0\1\u03f2\2\0\37\u03aa\1\u03f3"+
    "\2\u03aa\37\0\1\u03f4\30\0\1\u03f5\13\0\37\u03ad\1\u03f6"+
    "\2\u03ad\37\u03ae\1\u03f7\2\u03ae\37\0\1\u03f8\2\0\37\u03b0"+
    "\1\u03f9\2\u03b0\14\0\1\u03fa\63\0\1\u03fb\3\0\37\u03b3"+
    "\1\u03fc\2\u03b3\37\u03b6\1\u03fd\2\u03b6\23\0\1\u03fe\55\0"+
    "\1\u03ff\41\0\1\u0400\2\0\37\u03ba\1\u0401\2\u03ba\37\u03bb"+
    "\1\u0402\2\u03bb\37\0\1\u0403\40\0\1\u0404\3\0\37\u03c1"+
    "\1\u0405\2\u03c1\37\0\1\u0406\2\0\37\u03c4\1\u0407\2\u03c4"+
    "\37\u03c6\1\u0408\2\u03c6\10\0\1\u0409\43\0\1\u040a\41\0"+
    "\1\u040b\32\0\1\u040c\55\0\1\u040d\56\0\1\u040e\10\0"+
    "\1\u040f\41\0\1\u0410\41\0\1\u0411\44\0\1\u0412\43\0"+
    "\1\u0413\41\0\1\u0414\55\0\1\u0415\25\0\1\u0416\41\0"+
    "\1\u0417\34\0\1\u0418\46\0\1\u0419\34\0\1\u041a\36\0"+
    "\37\u03ed\1\u041b\2\u03ed\37\u03ee\1\u041c\2\u03ee\37\u03ef\1\u041d"+
    "\2\u03ef\23\0\1\u041e\41\0\1\u041f\16\0\37\u03f2\1\u0420"+
    "\2\u03f2\37\u03f4\1\u0421\2\u03f4\33\0\1\u0422\6\0\37\u03f8"+
    "\1\u0423\2\u03f8\36\0\1\u0424\42\0\1\u0425\7\0\1\u0426"+
    "\34\0\37\u03ff\1\u0427\2\u03ff\37\u0400\1\u0428\2\u0400\37\u0403"+
    "\1\u0429\2\u0403\37\0\1\u042a\2\0\37\u0406\1\u042b\2\u0406"+
    "\3\0\1\u042c\41\0\1\u042d\41\0\1\u042e\46\0\1\u042f"+
    "\41\0\1\u0430\34\0\1\u0431\41\0\1\u0432\41\0\1\u0433"+
    "\41\0\1\u0434\41\0\1\u0435\51\0\1\u0436\55\0\1\u0437"+
    "\41\0\1\u0438\50\0\1\u0439\42\0\1\u043a\2\0\37\u0425"+
    "\1\u043b\2\u0425\36\0\1\u043c\3\0\37\u042a\1\u043d\2\u042a"+
    "\3\0\1\u043e\51\0\1\u043f\64\0\1\u0440\41\0\1\u0441"+
    "\42\0\1\u0442\2\0\37\u043a\1\u0443\2\u043a\37\0\1\u0444"+
    "\5\0\1\u0445\75\0\1\u0446\41\0\1\u0447\2\0\37\u0442"+
    "\1\u0448\2\u0442\37\u0444\1\u0449\2\u0444\37\u0446\1\u044a\2\u0446"+
    "\37\u0447\1\u044b\2\u0447";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0, 
     0,  1,  0,  1,  0,  1,  0,  1,  0,  9,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  9,  9,  0,  9,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  9,  0,  1,  0,  0,  9,  0,  0,  0,  0,  0, 
     9,  0,  0,  9,  9,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9, 
     9,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  9,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  9, 
     0,  9,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  0,  0,  9, 
     0,  0,  0,  0,  9,  9,  9,  9,  0,  9,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  9,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  9,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0,  9,  0,  9,  0, 
     0,  0,  0,  9,  9,  9,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  9,  0, 
     9,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  9,  1,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  9, 
     0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  0,  0,  9,  0, 
     0,  0,  0,  9,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  9,  9,  9,  9,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  9, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0,  9, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  9,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9, 
     0,  0,  9,  0,  9,  0,  9,  9,  9,  0,  9,  0,  9,  0,  9,  0, 
     0,  0,  9,  0,  0,  0,  9,  0,  0,  9,  0,  0,  9,  9,  9,  9, 
     9,  0,  0,  0,  9,  0,  0,  9,  9,  9,  9,  9,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  9,  9,  0,  9,  0,  0,  9,  9,  0,  0,  0, 
     9,  9,  0,  0,  9,  0,  9,  9,  9,  0,  0,  9,  0,  0,  9,  9, 
     9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9,  9,  9,  0,  0,  9, 
     9,  0,  9,  0,  0,  0,  9,  9,  9,  0,  9,  9,  9,  9,  0,  0, 
     9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  9,  0,  9,  9,  0,  0, 
     0,  0,  9,  0,  9,  0,  0,  9,  9,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[29716];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 581: 
          { return symbolFactory.newSymbol("ID_ATTR", ID_ATTR); }
        case 1100: break;
        case 964: 
          { return symbolFactory.newSymbol("VALUE_ATTR", VALUE_ATTR); }
        case 1101: break;
        case 962: 
          { return symbolFactory.newSymbol("VLINK_ATTR", VLINK_ATTR); }
        case 1102: break;
        case 959: 
          { return symbolFactory.newSymbol("ISMAP_ATTR", ISMAP_ATTR); }
        case 1103: break;
        case 958: 
          { return symbolFactory.newSymbol("SHAPE_ATTR", SHAPE_ATTR); }
        case 1104: break;
        case 956: 
          { return symbolFactory.newSymbol("START_ATTR", START_ATTR); }
        case 1105: break;
        case 948: 
          { return symbolFactory.newSymbol("ALIGN_ATTR", ALIGN_ATTR); }
        case 1106: break;
        case 947: 
          { return symbolFactory.newSymbol("ALINK_ATTR", ALINK_ATTR); }
        case 1107: break;
        case 936: 
          { return symbolFactory.newSymbol("TITLE_ATTR", TITLE_ATTR); }
        case 1108: break;
        case 935: 
          { return symbolFactory.newSymbol("CLEAR_ATTR", CLEAR_ATTR); }
        case 1109: break;
        case 929: 
          { return symbolFactory.newSymbol("COLOR_ATTR", COLOR_ATTR); }
        case 1110: break;
        case 719: 
          { return symbolFactory.newSymbol("ALT_ATTR", ALT_ATTR); }
        case 1111: break;
        case 727: 
          { return symbolFactory.newSymbol("REL_ATTR", REL_ATTR); }
        case 1112: break;
        case 728: 
          { return symbolFactory.newSymbol("REV_ATTR", REV_ATTR); }
        case 1113: break;
        case 736: 
          { return symbolFactory.newSymbol("SRC_ATTR", SRC_ATTR); }
        case 1114: break;
        case 739: 
          { return symbolFactory.newSymbol("URN_ATTR", URN_ATTR); }
        case 1115: break;
        case 1031: 
          { return symbolFactory.newSymbol("VSPACE_ATTR", VSPACE_ATTR); }
        case 1116: break;
        case 1030: 
          { return symbolFactory.newSymbol("VALIGN_ATTR", VALIGN_ATTR); }
        case 1117: break;
        case 1028: 
          { return symbolFactory.newSymbol("USEMAP_ATTR", USEMAP_ATTR); }
        case 1118: break;
        case 1025: 
          { return symbolFactory.newSymbol("NOHREF_ATTR", NOHREF_ATTR); }
        case 1119: break;
        case 1024: 
          { return symbolFactory.newSymbol("NOWRAP_ATTR", NOWRAP_ATTR); }
        case 1120: break;
        case 1020: 
          { return symbolFactory.newSymbol("BORDER_ATTR", BORDER_ATTR); }
        case 1121: break;
        case 1019: 
          { return symbolFactory.newSymbol("ACTION_ATTR", ACTION_ATTR); }
        case 1122: break;
        case 1016: 
          { return symbolFactory.newSymbol("METHOD_ATTR", METHOD_ATTR); }
        case 1123: break;
        case 1014: 
          { return symbolFactory.newSymbol("HSPACE_ATTR", HSPACE_ATTR); }
        case 1124: break;
        case 1013: 
          { return symbolFactory.newSymbol("HEIGHT_ATTR", HEIGHT_ATTR); }
        case 1125: break;
        case 1010: 
          { return symbolFactory.newSymbol("PROMPT_ATTR", PROMPT_ATTR); }
        case 1126: break;
        case 1003: 
          { return symbolFactory.newSymbol("COORDS_ATTR", COORDS_ATTR); }
        case 1127: break;
        case 861: 
          { return symbolFactory.newSymbol("NAME_ATTR", NAME_ATTR); }
        case 1128: break;
        case 830: 
          { return symbolFactory.newSymbol("COLS_ATTR", COLS_ATTR); }
        case 1129: break;
        case 836: 
          { return symbolFactory.newSymbol("TYPE_ATTR", TYPE_ATTR); }
        case 1130: break;
        case 837: 
          { return symbolFactory.newSymbol("TEXT_ATTR", TEXT_ATTR); }
        case 1131: break;
        case 843: 
          { return symbolFactory.newSymbol("HREF_ATTR", HREF_ATTR); }
        case 1132: break;
        case 849: 
          { return symbolFactory.newSymbol("LINK_ATTR", LINK_ATTR); }
        case 1133: break;
        case 857: 
          { return symbolFactory.newSymbol("ROWS_ATTR", ROWS_ATTR); }
        case 1134: break;
        case 1095: 
          { return symbolFactory.newSymbol("HTTP_EQUIV_ATTR", HTTP_EQUIV_ATTR); }
        case 1135: break;
        case 1090: 
          { return symbolFactory.newSymbol("MAXLENGTH_ATTR", MAXLENGTH_ATTR); }
        case 1136: break;
        case 1098: 
          { return symbolFactory.newSymbol("CELLSPACING_ATTR", CELLSPACING_ATTR); }
        case 1137: break;
        case 1097: 
          { return symbolFactory.newSymbol("CELLPADDING_ATTR", CELLPADDING_ATTR); }
        case 1138: break;
        case 1096: 
          { return symbolFactory.newSymbol("BACKGROUND_ATTR", BACKGROUND_ATTR); }
        case 1139: break;
        case 4: 
          { /*Ignore*/ }
        case 1140: break;
        case 1066: 
          { return symbolFactory.newSymbol("VERSION_ATTR", VERSION_ATTR); }
        case 1141: break;
        case 1064: 
          { return symbolFactory.newSymbol("NOSHADE_ATTR", NOSHADE_ATTR); }
        case 1142: break;
        case 1063: 
          { return symbolFactory.newSymbol("ROWSPAN_ATTR", ROWSPAN_ATTR); }
        case 1143: break;
        case 1062: 
          { return symbolFactory.newSymbol("BGCOLOR_ATTR", BGCOLOR_ATTR); }
        case 1144: break;
        case 1058: 
          { return symbolFactory.newSymbol("METHODS_ATTR", METHODS_ATTR); }
        case 1145: break;
        case 1056: 
          { return symbolFactory.newSymbol("ENCTYPE_ATTR", ENCTYPE_ATTR); }
        case 1146: break;
        case 1055: 
          { return symbolFactory.newSymbol("CHECKED_ATTR", CHECKED_ATTR); }
        case 1147: break;
        case 1052: 
          { return symbolFactory.newSymbol("CONTENT_ATTR", CONTENT_ATTR); }
        case 1148: break;
        case 1051: 
          { return symbolFactory.newSymbol("COLSPAN_ATTR", COLSPAN_ATTR); }
        case 1149: break;
        case 1050: 
          { return symbolFactory.newSymbol("COMPACT_ATTR", COMPACT_ATTR); }
        case 1150: break;
        case 865: 
          { return symbolFactory.newSymbol("SIZE_ATTR_HR", SIZE_ATTR_HR); }
        case 1151: break;
        case 513: 
          {  return symbolFactory.newSymbol("UlClose", UlClose);  }
        case 1152: break;
        case 488: 
          {  return symbolFactory.newSymbol("BrClose", BrClose);  }
        case 1153: break;
        case 476: 
          {  return symbolFactory.newSymbol("LiClose", LiClose);  }
        case 1154: break;
        case 470: 
          {  return symbolFactory.newSymbol("HnClose", HnClose);  }
        case 1155: break;
        case 469: 
          {  return symbolFactory.newSymbol("HrClose", HrClose);  }
        case 1156: break;
        case 466: 
          {  return symbolFactory.newSymbol("EmClose", EmClose);  }
        case 1157: break;
        case 460: 
          {  return symbolFactory.newSymbol("TrClose", TrClose);  }
        case 1158: break;
        case 456: 
          {  return symbolFactory.newSymbol("ThClose", ThClose);  }
        case 1159: break;
        case 454: 
          {  return symbolFactory.newSymbol("TtClose", TtClose);  }
        case 1160: break;
        case 453: 
          {  return symbolFactory.newSymbol("TdClose", TdClose);  }
        case 1161: break;
        case 446: 
          {  return symbolFactory.newSymbol("OlClose", OlClose);  }
        case 1162: break;
        case 441: 
          {  return symbolFactory.newSymbol("DlClose", DlClose);  }
        case 1163: break;
        case 439: 
          {  return symbolFactory.newSymbol("DtClose", DtClose);  }
        case 1164: break;
        case 438: 
          {  return symbolFactory.newSymbol("DdClose", DdClose);  }
        case 1165: break;
        case 358: 
          {  return symbolFactory.newSymbol("XmpOpen", XmpOpen);  }
        case 1166: break;
        case 357: 
          {  return symbolFactory.newSymbol("VarOpen", VarOpen);  }
        case 1167: break;
        case 356: 
          {  return symbolFactory.newSymbol("KbdOpen", KbdOpen);  }
        case 1168: break;
        case 353: 
          {  return symbolFactory.newSymbol("InsOpen", InsOpen);  }
        case 1169: break;
        case 351: 
          {  return symbolFactory.newSymbol("ImgOpen", ImgOpen);  }
        case 1170: break;
        case 346: 
          {  return symbolFactory.newSymbol("SubOpen", SubOpen);  }
        case 1171: break;
        case 345: 
          {  return symbolFactory.newSymbol("SupOpen", SupOpen);  }
        case 1172: break;
        case 333: 
          {  return symbolFactory.newSymbol("BigOpen", BigOpen);  }
        case 1173: break;
        case 329: 
          {  return symbolFactory.newSymbol("BdoOpen", BdoOpen);  }
        case 1174: break;
        case 221: 
          {  return symbolFactory.newSymbol("DelOpen", DelOpen);  }
        case 1175: break;
        case 222: 
          {  return symbolFactory.newSymbol("DfnOpen", DfnOpen);  }
        case 1176: break;
        case 223: 
          {  return symbolFactory.newSymbol("DirOpen", DirOpen);  }
        case 1177: break;
        case 224: 
          {  return symbolFactory.newSymbol("DivOpen", DivOpen);  }
        case 1178: break;
        case 228: 
          {  return symbolFactory.newSymbol("ColOpen", ColOpen);  }
        case 1179: break;
        case 240: 
          {  return symbolFactory.newSymbol("PreOpen", PreOpen);  }
        case 1180: break;
        case 245: 
          {  return symbolFactory.newSymbol("MapOpen", MapOpen);  }
        case 1181: break;
        case 42: 
          {  return symbolFactory.newSymbol("UOpen", UOpen);  }
        case 1182: break;
        case 41: 
          {  return symbolFactory.newSymbol("QOpen", QOpen);  }
        case 1183: break;
        case 28: 
          {  return symbolFactory.newSymbol("POpen", POpen);  }
        case 1184: break;
        case 33: 
          {  return symbolFactory.newSymbol("AOpen", AOpen);  }
        case 1185: break;
        case 35: 
          {  return symbolFactory.newSymbol("BOpen", BOpen);  }
        case 1186: break;
        case 37: 
          {  return symbolFactory.newSymbol("SOpen", SOpen);  }
        case 1187: break;
        case 39: 
          {  return symbolFactory.newSymbol("IOpen", IOpen);  }
        case 1188: break;
        case 1084: 
          { return symbolFactory.newSymbol("SELECTED_ATTR", SELECTED_ATTR); }
        case 1189: break;
        case 1082: 
          { return symbolFactory.newSymbol("MULTIPLE_ATTR", MULTIPLE_ATTR); }
        case 1190: break;
        case 873: 
          { return symbolFactory.newSymbol("WIDTH_ATTR_HR", WIDTH_ATTR_HR); }
        case 1191: break;
        case 2: 
        case 3: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 1192: break;
        case 917: 
          {  return symbolFactory.newSymbol("InputClose", InputClose);  }
        case 1193: break;
        case 914: 
          {  return symbolFactory.newSymbol("FrameClose", FrameClose);  }
        case 1194: break;
        case 913: 
          {  return symbolFactory.newSymbol("SmallClose", SmallClose);  }
        case 1195: break;
        case 909: 
          {  return symbolFactory.newSymbol("StyleClose", StyleClose);  }
        case 1196: break;
        case 897: 
          {  return symbolFactory.newSymbol("LabelClose", LabelClose);  }
        case 1197: break;
        case 895: 
          {  return symbolFactory.newSymbol("ParamClose", ParamClose);  }
        case 1198: break;
        case 893: 
          {  return symbolFactory.newSymbol("TitleClose", TitleClose);  }
        case 1199: break;
        case 892: 
          {  return symbolFactory.newSymbol("TfootClose", TfootClose);  }
        case 1200: break;
        case 891: 
          {  return symbolFactory.newSymbol("TbodyClose", TbodyClose);  }
        case 1201: break;
        case 890: 
          {  return symbolFactory.newSymbol("TableClose", TableClose);  }
        case 1202: break;
        case 889: 
          {  return symbolFactory.newSymbol("TheadClose", TheadClose);  }
        case 1203: break;
        case 747: 
          {  return symbolFactory.newSymbol("OptionOpen", OptionOpen);  }
        case 1204: break;
        case 749: 
          {  return symbolFactory.newSymbol("ObjectOpen", ObjectOpen);  }
        case 1205: break;
        case 751: 
          {  return symbolFactory.newSymbol("CenterOpen", CenterOpen);  }
        case 1206: break;
        case 755: 
          {  return symbolFactory.newSymbol("LegendOpen", LegendOpen);  }
        case 1207: break;
        case 759: 
          {  return symbolFactory.newSymbol("AppletOpen", AppletOpen);  }
        case 1208: break;
        case 814: 
          {  return symbolFactory.newSymbol("ButtonOpen", ButtonOpen);  }
        case 1209: break;
        case 817: 
          {  return symbolFactory.newSymbol("NextidOpen", NextidOpen);  }
        case 1210: break;
        case 818: 
          {  return symbolFactory.newSymbol("ScriptOpen", ScriptOpen);  }
        case 1211: break;
        case 819: 
          {  return symbolFactory.newSymbol("StrongOpen", StrongOpen);  }
        case 1212: break;
        case 820: 
          {  return symbolFactory.newSymbol("StrikeOpen", StrikeOpen);  }
        case 1213: break;
        case 821: 
          {  return symbolFactory.newSymbol("SelectOpen", SelectOpen);  }
        case 1214: break;
        case 825: 
          {  return symbolFactory.newSymbol("IframeOpen", IframeOpen);  }
        case 1215: break;
        case 437: 
          {  return symbolFactory.newSymbol("AreaOpen", AreaOpen);  }
        case 1216: break;
        case 436: 
          {  return symbolFactory.newSymbol("AbbrOpen", AbbrOpen);  }
        case 1217: break;
        case 431: 
          {  return symbolFactory.newSymbol("LinkOpen", LinkOpen);  }
        case 1218: break;
        case 428: 
          {  return symbolFactory.newSymbol("MenuOpen", MenuOpen);  }
        case 1219: break;
        case 427: 
          {  return symbolFactory.newSymbol("MetaOpen", MetaOpen);  }
        case 1220: break;
        case 426: 
          {  return symbolFactory.newSymbol("HeadOpen", HeadOpen);  }
        case 1221: break;
        case 425: 
          {  return symbolFactory.newSymbol("HtmlOpen", HtmlOpen);  }
        case 1222: break;
        case 416: 
          {  return symbolFactory.newSymbol("CiteOpen", CiteOpen);  }
        case 1223: break;
        case 412: 
          {  return symbolFactory.newSymbol("CodeOpen", CodeOpen);  }
        case 1224: break;
        case 516: 
          {  return symbolFactory.newSymbol("BodyOpen", BodyOpen);  }
        case 1225: break;
        case 518: 
          {  return symbolFactory.newSymbol("BaseOpen", BaseOpen);  }
        case 1226: break;
        case 527: 
          {  return symbolFactory.newSymbol("SpanOpen", SpanOpen);  }
        case 1227: break;
        case 530: 
          {  return symbolFactory.newSymbol("SampOpen", SampOpen);  }
        case 1228: break;
        case 531: 
          {  return symbolFactory.newSymbol("FormOpen", FormOpen);  }
        case 1229: break;
        case 532: 
          {  return symbolFactory.newSymbol("FontOpen", FontOpen);  }
        case 1230: break;
        case 611: 
          {  return symbolFactory.newSymbol("DelClose", DelClose);  }
        case 1231: break;
        case 612: 
          {  return symbolFactory.newSymbol("DfnClose", DfnClose);  }
        case 1232: break;
        case 613: 
          {  return symbolFactory.newSymbol("DirClose", DirClose);  }
        case 1233: break;
        case 614: 
          {  return symbolFactory.newSymbol("DivClose", DivClose);  }
        case 1234: break;
        case 619: 
          {  return symbolFactory.newSymbol("ColClose", ColClose);  }
        case 1235: break;
        case 632: 
          {  return symbolFactory.newSymbol("PreClose", PreClose);  }
        case 1236: break;
        case 637: 
          {  return symbolFactory.newSymbol("MapClose", MapClose);  }
        case 1237: break;
        case 647: 
          {  return symbolFactory.newSymbol("BdoClose", BdoClose);  }
        case 1238: break;
        case 651: 
          {  return symbolFactory.newSymbol("BigClose", BigClose);  }
        case 1239: break;
        case 664: 
          {  return symbolFactory.newSymbol("SupClose", SupClose);  }
        case 1240: break;
        case 665: 
          {  return symbolFactory.newSymbol("SubClose", SubClose);  }
        case 1241: break;
        case 670: 
          {  return symbolFactory.newSymbol("ImgClose", ImgClose);  }
        case 1242: break;
        case 672: 
          {  return symbolFactory.newSymbol("InsClose", InsClose);  }
        case 1243: break;
        case 675: 
          {  return symbolFactory.newSymbol("KbdClose", KbdClose);  }
        case 1244: break;
        case 676: 
          {  return symbolFactory.newSymbol("VarClose", VarClose);  }
        case 1245: break;
        case 677: 
          {  return symbolFactory.newSymbol("XmpClose", XmpClose);  }
        case 1246: break;
        case 1092: 
          {  return symbolFactory.newSymbol("BlockquoteClose", BlockquoteClose);  }
        case 1247: break;
        case 996: 
          {  return symbolFactory.newSymbol("IframeClose", IframeClose);  }
        case 1248: break;
        case 992: 
          {  return symbolFactory.newSymbol("SelectClose", SelectClose);  }
        case 1249: break;
        case 991: 
          {  return symbolFactory.newSymbol("StrikeClose", StrikeClose);  }
        case 1250: break;
        case 990: 
          {  return symbolFactory.newSymbol("StrongClose", StrongClose);  }
        case 1251: break;
        case 989: 
          {  return symbolFactory.newSymbol("ScriptClose", ScriptClose);  }
        case 1252: break;
        case 988: 
          {  return symbolFactory.newSymbol("NextidClose", NextidClose);  }
        case 1253: break;
        case 985: 
          {  return symbolFactory.newSymbol("ButtonClose", ButtonClose);  }
        case 1254: break;
        case 982: 
          {  return symbolFactory.newSymbol("AppletClose", AppletClose);  }
        case 1255: break;
        case 978: 
          {  return symbolFactory.newSymbol("LegendClose", LegendClose);  }
        case 1256: break;
        case 974: 
          {  return symbolFactory.newSymbol("CenterClose", CenterClose);  }
        case 1257: break;
        case 972: 
          {  return symbolFactory.newSymbol("ObjectClose", ObjectClose);  }
        case 1258: break;
        case 970: 
          {  return symbolFactory.newSymbol("OptionClose", OptionClose);  }
        case 1259: break;
        case 926: 
          {  return symbolFactory.newSymbol("IsindexOpen", IsindexOpen);  }
        case 1260: break;
        case 881: 
          {  return symbolFactory.newSymbol("AcronymOpen", AcronymOpen);  }
        case 1261: break;
        case 880: 
          {  return symbolFactory.newSymbol("AddressOpen", AddressOpen);  }
        case 1262: break;
        case 879: 
          {  return symbolFactory.newSymbol("ListingOpen", ListingOpen);  }
        case 1263: break;
        case 876: 
          {  return symbolFactory.newSymbol("CaptionOpen", CaptionOpen);  }
        case 1264: break;
        case 5: 
          {  
			String buffer = yytext();
			buffer = buffer.replace(">","");
			buffer = buffer.trim();
			if(buffer.length() > 0) {
				return symbolFactory.newSymbol("CONTENT", CONTENT, buffer) ;
			}
		 }
        case 1265: break;
        case 598: 
          {  return symbolFactory.newSymbol("TheadOpen", TheadOpen);  }
        case 1266: break;
        case 599: 
          {  return symbolFactory.newSymbol("TableOpen", TableOpen);  }
        case 1267: break;
        case 600: 
          {  return symbolFactory.newSymbol("TbodyOpen", TbodyOpen);  }
        case 1268: break;
        case 601: 
          {  return symbolFactory.newSymbol("TfootOpen", TfootOpen);  }
        case 1269: break;
        case 602: 
          {  return symbolFactory.newSymbol("TitleOpen", TitleOpen);  }
        case 1270: break;
        case 604: 
          {  return symbolFactory.newSymbol("ParamOpen", ParamOpen);  }
        case 1271: break;
        case 606: 
          {  return symbolFactory.newSymbol("LabelOpen", LabelOpen);  }
        case 1272: break;
        case 685: 
          {  return symbolFactory.newSymbol("StyleOpen", StyleOpen);  }
        case 1273: break;
        case 689: 
          {  return symbolFactory.newSymbol("SmallOpen", SmallOpen);  }
        case 1274: break;
        case 690: 
          {  return symbolFactory.newSymbol("FrameOpen", FrameOpen);  }
        case 1275: break;
        case 692: 
          {  return symbolFactory.newSymbol("InputOpen", InputOpen);  }
        case 1276: break;
        case 763: 
          {  return symbolFactory.newSymbol("CodeClose", CodeClose);  }
        case 1277: break;
        case 767: 
          {  return symbolFactory.newSymbol("CiteClose", CiteClose);  }
        case 1278: break;
        case 776: 
          {  return symbolFactory.newSymbol("HtmlClose", HtmlClose);  }
        case 1279: break;
        case 777: 
          {  return symbolFactory.newSymbol("HeadClose", HeadClose);  }
        case 1280: break;
        case 778: 
          {  return symbolFactory.newSymbol("MetaClose", MetaClose);  }
        case 1281: break;
        case 779: 
          {  return symbolFactory.newSymbol("MenuClose", MenuClose);  }
        case 1282: break;
        case 782: 
          {  return symbolFactory.newSymbol("LinkClose", LinkClose);  }
        case 1283: break;
        case 787: 
          {  return symbolFactory.newSymbol("AbbrClose", AbbrClose);  }
        case 1284: break;
        case 788: 
          {  return symbolFactory.newSymbol("AreaClose", AreaClose);  }
        case 1285: break;
        case 789: 
          {  return symbolFactory.newSymbol("BodyClose", BodyClose);  }
        case 1286: break;
        case 791: 
          {  return symbolFactory.newSymbol("BaseClose", BaseClose);  }
        case 1287: break;
        case 801: 
          {  return symbolFactory.newSymbol("SpanClose", SpanClose);  }
        case 1288: break;
        case 804: 
          {  return symbolFactory.newSymbol("SampClose", SampClose);  }
        case 1289: break;
        case 805: 
          {  return symbolFactory.newSymbol("FormClose", FormClose);  }
        case 1290: break;
        case 806: 
          {  return symbolFactory.newSymbol("FontClose", FontClose);  }
        case 1291: break;
        case 325: 
          {  return symbolFactory.newSymbol("UClose", UClose);  }
        case 1292: break;
        case 324: 
          {  return symbolFactory.newSymbol("QClose", QClose);  }
        case 1293: break;
        case 318: 
          {  return symbolFactory.newSymbol("IClose", IClose);  }
        case 1294: break;
        case 307: 
          {  return symbolFactory.newSymbol("SClose", SClose);  }
        case 1295: break;
        case 101: 
          {  return symbolFactory.newSymbol("TtOpen", TtOpen);  }
        case 1296: break;
        case 100: 
          {  return symbolFactory.newSymbol("TdOpen", TdOpen);  }
        case 1297: break;
        case 94: 
          {  return symbolFactory.newSymbol("OlOpen", OlOpen);  }
        case 1298: break;
        case 90: 
          {  return symbolFactory.newSymbol("DlOpen", DlOpen);  }
        case 1299: break;
        case 88: 
          {  return symbolFactory.newSymbol("DtOpen", DtOpen);  }
        case 1300: break;
        case 87: 
          {  return symbolFactory.newSymbol("DdOpen", DdOpen);  }
        case 1301: break;
        case 103: 
          {  return symbolFactory.newSymbol("ThOpen", ThOpen);  }
        case 1302: break;
        case 106: 
          {  return symbolFactory.newSymbol("TrOpen", TrOpen);  }
        case 1303: break;
        case 112: 
          {  return symbolFactory.newSymbol("EmOpen", EmOpen);  }
        case 1304: break;
        case 115: 
          {  return symbolFactory.newSymbol("HrOpen", HrOpen);  }
        case 1305: break;
        case 116: 
          {  return symbolFactory.newSymbol("HnOpen", HnOpen);  }
        case 1306: break;
        case 121: 
          {  return symbolFactory.newSymbol("LiOpen", LiOpen);  }
        case 1307: break;
        case 151: 
          {  return symbolFactory.newSymbol("BrOpen", BrOpen);  }
        case 1308: break;
        case 171: 
          {  return symbolFactory.newSymbol("UlOpen", UlOpen);  }
        case 1309: break;
        case 277: 
          {  return symbolFactory.newSymbol("PClose", PClose);  }
        case 1310: break;
        case 291: 
          {  return symbolFactory.newSymbol("AClose", AClose);  }
        case 1311: break;
        case 297: 
          {  return symbolFactory.newSymbol("BClose", BClose);  }
        case 1312: break;
        case 1085: 
          {  return symbolFactory.newSymbol("PlaintextClose", PlaintextClose);  }
        case 1313: break;
        case 1077: 
          {  return symbolFactory.newSymbol("BlockquoteOpen", BlockquoteOpen);  }
        case 1314: break;
        case 1049: 
          {  return symbolFactory.newSymbol("BasefontOpen", BasefontOpen);  }
        case 1315: break;
        case 1047: 
          {  return symbolFactory.newSymbol("IsindexClose", IsindexClose);  }
        case 1316: break;
        case 1040: 
          {  return symbolFactory.newSymbol("AcronymClose", AcronymClose);  }
        case 1317: break;
        case 1039: 
          {  return symbolFactory.newSymbol("AddressClose", AddressClose);  }
        case 1318: break;
        case 1038: 
          {  return symbolFactory.newSymbol("ListingClose", ListingClose);  }
        case 1319: break;
        case 1035: 
          {  return symbolFactory.newSymbol("CaptionClose", CaptionClose);  }
        case 1320: break;
        case 1002: 
          {  return symbolFactory.newSymbol("FieldsetOpen", FieldsetOpen);  }
        case 1321: break;
        case 1001: 
          {  return symbolFactory.newSymbol("FramesetOpen", FramesetOpen);  }
        case 1322: break;
        case 1000: 
          {  return symbolFactory.newSymbol("NoframesOpen", NoframesOpen);  }
        case 1323: break;
        case 999: 
          {  return symbolFactory.newSymbol("NoscriptOpen", NoscriptOpen);  }
        case 1324: break;
        case 968: 
          {  return symbolFactory.newSymbol("TextareaOpen", TextareaOpen);  }
        case 1325: break;
        case 967: 
          {  return symbolFactory.newSymbol("ColgroupOpen", ColgroupOpen);  }
        case 1326: break;
        case 966: 
          {  return symbolFactory.newSymbol("OptgroupOpen", OptgroupOpen);  }
        case 1327: break;
        case 1076: 
          {  return symbolFactory.newSymbol("FieldsetClose", FieldsetClose);  }
        case 1328: break;
        case 1075: 
          {  return symbolFactory.newSymbol("FramesetClose", FramesetClose);  }
        case 1329: break;
        case 1074: 
          {  return symbolFactory.newSymbol("NoframesClose", NoframesClose);  }
        case 1330: break;
        case 1073: 
          {  return symbolFactory.newSymbol("NoscriptClose", NoscriptClose);  }
        case 1331: break;
        case 1072: 
          {  return symbolFactory.newSymbol("BasefontClose", BasefontClose);  }
        case 1332: break;
        case 1069: 
          {  return symbolFactory.newSymbol("TextareaClose", TextareaClose);  }
        case 1333: break;
        case 1068: 
          {  return symbolFactory.newSymbol("ColgroupClose", ColgroupClose);  }
        case 1334: break;
        case 1067: 
          {  return symbolFactory.newSymbol("OptgroupClose", OptgroupClose);  }
        case 1335: break;
        case 1032: 
          {  return symbolFactory.newSymbol("PlaintextOpen", PlaintextOpen);  }
        case 1336: break;
        case 85: 
          { 
								String buffer = yytext();
								buffer = buffer.replace("\"", "");
								return symbolFactory.newSymbol("AttributeData", ATTRIBUTE_DATA, buffer);
						   }
        case 1337: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
