/* The following code was generated by JFlex 1.3.5 on 1/19/22, 3:41 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 1/19/22, 3:41 PM from the specification file
 * <tt>file:/C:/Users/Razvan/Desktop/Facultate/Gramatici/HtmlCompactDocumentsProcessor/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\4\0\1\16"+
    "\4\0\1\20\1\0\1\54\2\0\1\17\1\4\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\3\4\1\52\1\53\1\22\1\55\1\21\2\0"+
    "\32\5\6\0\1\13\1\30\1\35\1\25\1\11\1\12\1\36\1\23"+
    "\1\26\1\51\1\46\1\14\1\24\1\33\1\31\1\34\1\50\1\7"+
    "\1\15\1\6\1\10\1\27\1\47\1\45\1\32\1\5\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    46,    92,   138,   184,    92,   230,   276,    92,   322, 
       92,   368,   414,    92,    92,   184,    92,    92,   460,   506, 
      552,   598,   644,   690,   736,   782,   828,   874,   920,   966, 
     1012,  1058,  1104,  1150,  1196,  1242,  1288,  1334,  1380,  1426, 
     1472,  1518,   184,   184,   184,  1564,  1610,   184,   184,  1656, 
     1702,  1748,  1794,   184,  1840,  1886,   184,  1932,  1978,  2024, 
     2070,  2116,  2162,  2208,  2254,  2300,  2346,  2392,  2438,  2484, 
     2530,  2576,  2622,  2668,  2714,  2760,  2806,  2852,  2898,  2944, 
     2990,  3036,  3082,  3128,  3174,  3220,  3266,  3312,  3358,  3404, 
     3450,  3496,  3542,   184,  3588,   184,  3634,   184,   184,   184, 
      184,   184,   184,  3680,  3726,  3772,   184,  3818,  3864,   184, 
      184,  3910,  3956,  4002,  4048,  4094,  4140,  4186,   184,  4232, 
     4278,  4324,  4370,  4416,  4462,   184,  4508,  4554,  4600,  4646, 
     4692,  4738,  4784,  4830,  4876,  4922,  4968,  5014,  5060,  5106, 
     5152,   184,   184,  5198,  5244,  5290,  5336,  5382,  5428,  5474, 
     5520,  5566,  5612,  5658,  5704,  5750,  5796,  5842,  5888,  5934, 
     5980,  6026,  6072,  6118,  6164,  6210,   184,   184,  6256,  6302, 
     6348,  6394,   184,   184,  6440,  6486,   184,   184,  6532,   184, 
     6578,  6624,  6670,  6716,  6762,  6808,  6854,  6900,  6946,  6992, 
     7038,  7084,  7130,  7176,  7222,  7268,  7314,  7360,   184,   184, 
      184,   184,   184,   184,  7406,  7452,  7498,   184,  7544,   184, 
      184,  7590,  7636,  7682,  7728,  7774,  7820,  7866,  7912,  7958, 
      184,  8004,  8050,  8096,  8142,   184,  8188,  8234,  8280,  8326, 
     8372,  8418,  8464,  8510,  8556,  8602,  8648,  8694,   184,   184, 
      184,   184,   184,  8740,  8786,  8832,   184,   184,  8878,   184, 
     8924,  8970,  9016,   184,   184,  9062,  9108,  9154,  9200,  9246, 
     9292,  9338,  9384,  9430,   184,  9476,  9522,  9568,  9614,  9660, 
     9706,  9752,   184,  9798,   184,   184,  9844,  9890,  9936,  9982, 
    10028, 10074, 10120, 10166, 10212,   184,   184,   184, 10258,   184, 
    10304, 10350, 10396, 10442, 10488, 10534,   184, 10580, 10626, 10672, 
    10718, 10764,   184, 10810, 10856, 10902, 10948, 10994, 11040, 11086, 
    11132, 11178, 11224, 11270, 11316, 11362, 11408, 11454, 11500, 11546, 
      184,   184, 11592, 11638, 11684, 11730, 11776, 11822, 11868, 11914, 
    11960,   184,   184,   184,   184, 12006,   184,   184, 12052, 12098, 
    12144,   184,   184, 12190, 12236, 12282, 12328, 12374, 12420, 12466, 
      184, 12512, 12558, 12604, 12650,   184,   184,   184,   184, 12696, 
      184,   184, 12742, 12788, 12834, 12880, 12926, 12972, 13018, 13064, 
      184, 13110, 13156, 13202, 13248, 13294, 13340, 13386, 13432,   184, 
    13478, 13524, 13570, 13616,   184, 13662,   184, 13708, 13754,   184, 
      184,   184,   184,   184,   184, 13800, 13846, 13892, 13938, 13984, 
    14030,   184,   184, 14076, 14122, 14168,   184, 14214,   184, 14260, 
    14306, 14352, 14398, 14444, 14490,   184,   184, 14536,   184, 14582, 
    14628, 14674, 14720, 14766, 14812, 14858, 14904, 14950, 14996,   184, 
    15042, 15088,   184,   184, 15134,   184, 15180, 15226, 15272, 15318, 
    15364,   184, 15410, 15456, 15502, 15548, 15594, 15640,   184, 15686, 
    15732,   184,   184, 15778, 15824, 15870, 15916, 15962,   184, 16008, 
      184, 16054, 16100, 16146, 16192, 16238, 16284, 16330, 16376, 16422, 
      184, 16468, 16514, 16560, 16606, 16652, 16698, 16744, 16790, 16836, 
      184, 16882,   184, 16928,   184,   184,   184,   184, 16974,   184, 
      184, 17020, 17066, 17112, 17158, 17204, 17250,   184, 17296, 17342, 
    17388,   184, 17434,   184, 17480, 17526, 17572, 17618, 17664, 17710, 
      184, 17756, 17802, 17848, 17894, 17940, 17986, 18032, 18078, 18124, 
    18170, 18216,   184,   184, 18262, 18308, 18354, 18400,   184,   184, 
    18446,   184, 18492, 18538, 18584, 18630,   184, 18676, 18722,   184, 
    18768, 18814, 18860,   184,   184,   184, 18906, 18952, 18998, 19044, 
      184, 19090,   184, 19136,   184,   184,   184,   184,   184, 19182, 
    19228,   184, 19274, 19320,   184,   184, 19366, 19412, 19458, 19504, 
      184, 19550, 19596,   184,   184, 19642, 19688,   184, 19734,   184, 
    19780, 19826, 19872,   184, 19918,   184,   184,   184, 19964, 20010, 
    20056,   184,   184,   184, 20102,   184, 20148, 20194, 20240,   184, 
    20286, 20332,   184,   184,   184, 20378,   184,   184,   184, 20424, 
      184,   184,   184,   184,   184,   184, 20470,   184,   184,   184, 
    20516,   184, 20562,   184,   184
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\11\10\1\11\1\12"+
    "\1\3\1\13\1\14\14\10\6\7\5\10\1\15\1\16"+
    "\1\17\1\3\56\20\4\0\1\21\32\0\6\21\13\0"+
    "\1\5\1\0\1\21\32\0\6\21\67\0\2\22\1\0"+
    "\1\22\1\7\11\10\5\22\14\10\6\7\5\10\4\22"+
    "\4\0\12\10\5\0\27\10\10\0\1\21\4\0\1\23"+
    "\6\0\1\24\4\0\1\25\11\0\6\21\15\0\1\21"+
    "\1\0\1\26\1\0\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\3\0\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\45\1\46\1\47\1\0"+
    "\6\21\1\50\1\51\1\52\1\53\11\0\1\21\32\0"+
    "\6\21\10\0\1\54\24\0\1\55\31\0\20\24\1\56"+
    "\35\24\12\0\1\57\51\0\1\60\1\61\1\0\1\62"+
    "\1\63\1\64\7\0\1\65\1\0\1\66\1\67\1\0"+
    "\1\70\41\0\1\71\65\0\1\72\40\0\1\73\16\0"+
    "\1\74\2\0\1\75\33\0\1\76\15\0\1\77\2\0"+
    "\1\100\3\0\1\101\1\102\31\0\1\103\1\0\1\104"+
    "\12\0\1\105\35\0\1\106\1\0\1\107\1\110\12\0"+
    "\1\111\7\0\1\112\1\113\26\0\1\114\1\0\1\115"+
    "\1\0\1\116\1\117\1\120\1\121\5\0\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\0\1\131\1\132"+
    "\1\133\7\0\1\134\1\135\1\0\1\136\13\0\1\137"+
    "\1\140\1\0\1\141\25\0\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\21\0\1\150\1\151\1\0\1\152\50\0"+
    "\1\153\2\0\1\154\1\155\1\0\1\156\10\0\1\157"+
    "\1\160\41\0\1\161\1\0\1\162\1\163\6\0\1\164"+
    "\6\0\1\165\35\0\1\166\51\0\1\167\3\0\1\170"+
    "\1\171\10\0\1\172\1\173\2\0\1\174\4\0\1\175"+
    "\33\0\1\176\13\0\1\177\3\0\1\200\32\0\1\201"+
    "\17\0\1\202\33\0\1\203\3\0\1\204\1\205\52\0"+
    "\1\206\1\0\1\207\12\0\1\210\2\0\1\211\50\0"+
    "\1\212\42\0\1\213\16\0\1\214\55\0\1\215\25\0"+
    "\17\24\1\216\1\56\35\24\33\0\1\217\67\0\1\220"+
    "\41\0\1\221\54\0\1\222\36\0\1\223\52\0\1\224"+
    "\100\0\1\225\54\0\1\226\40\0\1\227\53\0\1\230"+
    "\53\0\1\231\23\0\1\232\33\0\1\233\71\0\1\234"+
    "\60\0\1\235\61\0\1\236\30\0\1\237\104\0\1\240"+
    "\47\0\1\241\1\0\1\242\40\0\1\243\15\0\1\244"+
    "\31\0\1\245\22\0\1\246\53\0\1\247\3\0\1\250"+
    "\35\0\1\251\54\0\1\252\55\0\1\253\51\0\1\254"+
    "\54\0\1\255\1\256\1\0\1\257\1\0\1\260\7\0"+
    "\1\261\1\0\1\262\1\263\43\0\1\264\50\0\1\265"+
    "\16\0\1\266\2\0\1\267\51\0\1\270\2\0\1\271"+
    "\3\0\1\272\1\273\31\0\1\274\1\0\1\275\12\0"+
    "\1\276\35\0\1\277\1\0\1\300\1\301\12\0\1\302"+
    "\7\0\1\303\1\304\26\0\1\305\2\0\1\306\25\0"+
    "\1\307\1\310\1\311\1\312\1\313\1\314\21\0\1\315"+
    "\1\316\1\0\1\317\50\0\1\320\2\0\1\321\2\0"+
    "\1\322\10\0\1\323\1\324\43\0\1\325\16\0\1\326"+
    "\35\0\1\327\55\0\1\330\1\331\10\0\1\332\1\333"+
    "\2\0\1\334\40\0\1\335\13\0\1\336\3\0\1\337"+
    "\52\0\1\340\33\0\1\341\11\0\1\342\45\0\1\343"+
    "\1\0\1\344\12\0\1\345\2\0\1\346\50\0\1\347"+
    "\61\0\1\350\51\0\1\351\44\0\1\352\56\0\1\353"+
    "\47\0\1\354\24\0\1\355\31\0\1\356\24\0\1\357"+
    "\35\0\1\360\74\0\1\361\31\0\1\362\17\0\1\363"+
    "\35\0\1\364\61\0\1\365\70\0\1\366\65\0\1\367"+
    "\34\0\1\370\16\0\1\371\30\0\1\372\63\0\1\373"+
    "\66\0\1\374\2\0\1\375\55\0\1\376\62\0\1\377"+
    "\44\0\1\u0100\45\0\1\u0101\111\0\1\u0102\12\0\1\u0103"+
    "\114\0\1\u0104\21\0\1\u0105\1\u0106\2\0\1\u0107\12\0"+
    "\1\u0108\36\0\1\u0109\53\0\1\u010a\61\0\1\u010b\75\0"+
    "\1\u010c\56\0\1\u010d\27\0\1\u010e\63\0\1\u010f\10\0"+
    "\1\u0110\64\0\1\u0111\53\0\1\u0112\50\0\1\u0113\37\0"+
    "\1\u0114\54\0\1\u0115\100\0\1\u0116\40\0\1\u0117\54\0"+
    "\1\u0118\56\0\1\u0119\66\0\1\u011a\41\0\1\u011b\70\0"+
    "\1\u011c\45\0\1\u011d\65\0\1\u011e\37\0\1\u011f\62\0"+
    "\1\u0120\51\0\1\u0121\55\0\1\u0122\62\0\1\u0123\72\0"+
    "\1\u0124\35\0\1\u0125\55\0\1\u0126\55\0\1\u0127\52\0"+
    "\1\u0128\115\0\1\u0129\35\0\1\u012a\2\0\1\u012b\40\0"+
    "\1\u012c\52\0\1\u012d\60\0\1\u012e\74\0\1\u012f\50\0"+
    "\1\u0130\74\0\1\u0131\40\0\1\u0132\33\0\1\u0133\62\0"+
    "\1\u0134\53\0\1\u0135\53\0\1\u0136\23\0\1\u0137\47\0"+
    "\1\u0138\60\0\1\u0139\61\0\1\u013a\30\0\1\u013b\104\0"+
    "\1\u013c\51\0\1\u013d\40\0\1\u013e\47\0\1\u013f\22\0"+
    "\1\u0140\53\0\1\u0141\3\0\1\u0142\35\0\1\u0143\54\0"+
    "\1\u0144\55\0\1\u0145\51\0\1\u0146\72\0\1\u0147\44\0"+
    "\1\u0148\56\0\1\u0149\74\0\1\u014a\31\0\1\u014b\24\0"+
    "\1\u014c\35\0\1\u014d\50\0\1\u014e\17\0\1\u014f\41\0"+
    "\1\u0150\57\0\1\u0151\47\0\1\u0152\63\0\1\u0153\66\0"+
    "\1\u0154\2\0\1\u0155\55\0\1\u0156\62\0\1\u0157\44\0"+
    "\1\u0158\101\0\1\u0159\12\0\1\u015a\60\0\1\u015b\1\u015c"+
    "\2\0\1\u015d\12\0\1\u015e\36\0\1\u015f\77\0\1\u0160"+
    "\56\0\1\u0161\27\0\1\u0162\74\0\1\u0163\64\0\1\u0164"+
    "\46\0\1\u0165\44\0\1\u0166\66\0\1\u0167\36\0\1\u0168"+
    "\62\0\1\u0169\52\0\1\u016a\115\0\1\u016b\20\0\1\u016c"+
    "\74\0\1\u016d\56\0\1\u016e\32\0\1\u016f\56\0\1\u0170"+
    "\77\0\1\u0171\57\0\1\u0172\52\0\1\u0173\54\0\1\u0174"+
    "\35\0\1\u0175\72\0\1\u0176\7\0\1\u0177\25\0\1\u0178"+
    "\73\0\1\u0179\40\0\1\u017a\103\0\1\u017b\27\0\1\u017c"+
    "\61\0\1\u017d\70\0\1\u017e\35\0\1\u017f\55\0\1\u0180"+
    "\60\0\1\u0181\102\0\1\u0182\30\0\1\u0183\102\0\1\u0184"+
    "\32\0\1\u0185\50\0\1\u0186\60\0\1\u0187\71\0\1\u0188"+
    "\41\0\1\u0189\76\0\1\u018a\50\0\1\u018b\41\0\1\u018c"+
    "\71\0\1\u018d\41\0\1\u018e\55\0\1\u018f\77\0\1\u0190"+
    "\55\0\1\u0191\36\0\1\u0192\50\0\1\u0193\74\0\1\u0194"+
    "\75\0\1\u0195\42\0\1\u0196\33\0\1\u0197\101\0\1\u0198"+
    "\34\0\1\u0199\75\0\1\u019a\27\0\1\u019b\63\0\1\u019c"+
    "\55\0\1\u019d\65\0\1\u019e\45\0\1\u019f\65\0\1\u01a0"+
    "\37\0\1\u01a1\56\0\1\u01a2\55\0\1\u01a3\62\0\1\u01a4"+
    "\72\0\1\u01a5\35\0\1\u01a6\55\0\1\u01a7\52\0\1\u01a8"+
    "\75\0\1\u01a9\2\0\1\u01aa\40\0\1\u01ab\52\0\1\u01ac"+
    "\60\0\1\u01ad\74\0\1\u01ae\1\0\1\u01af\46\0\1\u01b0"+
    "\43\0\1\u01b1\66\0\1\u01b2\36\0\1\u01b3\57\0\1\u01b4"+
    "\115\0\1\u01b5\37\0\1\u01b6\34\0\1\u01b7\77\0\1\u01b8"+
    "\57\0\1\u01b9\52\0\1\u01ba\34\0\1\u01bb\72\0\1\u01bc"+
    "\7\0\1\u01bd\43\0\1\u01be\40\0\1\u01bf\103\0\1\u01c0"+
    "\27\0\1\u01c1\54\0\1\u01c2\55\0\1\u01c3\60\0\1\u01c4"+
    "\55\0\1\u01c5\72\0\1\u01c6\37\0\1\u01c7\71\0\1\u01c8"+
    "\42\0\1\u01c9\71\0\1\u01ca\36\0\1\u01cb\61\0\1\u01cc"+
    "\111\0\1\u01cd\55\0\1\u01ce\17\0\1\u01cf\102\0\1\u01d0"+
    "\51\0\1\u01d1\33\0\1\u01d2\74\0\1\u01d3\57\0\1\u01d4"+
    "\40\0\1\u01d5\51\0\1\u01d6\72\0\1\u01d7\64\0\1\u01d8"+
    "\33\0\1\u01d9\72\0\1\u01da\36\0\1\u01db\57\0\1\u01dc"+
    "\53\0\1\u01dd\63\0\1\u01de\55\0\1\u01df\55\0\1\u01e0"+
    "\46\0\1\u01e1\101\0\1\u01e2\50\0\1\u01e3\63\0\1\u01e4"+
    "\33\0\1\u01e5\102\0\1\u01e6\25\0\1\u01e7\55\0\1\u01e8"+
    "\62\0\1\u01e9\53\0\1\u01ea\55\0\1\u01eb\55\0\1\u01ec"+
    "\71\0\1\u01ed\41\0\1\u01ee\55\0\1\u01ef\77\0\1\u01f0"+
    "\55\0\1\u01f1\31\0\1\u01f2\74\0\1\u01f3\75\0\1\u01f4"+
    "\42\0\1\u01f5\33\0\1\u01f6\101\0\1\u01f7\34\0\1\u01f8"+
    "\52\0\1\u01f9\100\0\1\u01fa\47\0\1\u01fb\37\0\1\u01fc"+
    "\56\0\1\u01fd\56\0\1\u01fe\111\0\1\u01ff\55\0\1\u0200"+
    "\44\0\1\u0201\51\0\1\u0202\33\0\1\u0203\76\0\1\u0204"+
    "\40\0\1\u0205\51\0\1\u0206\57\0\1\u0207\72\0\1\u0208"+
    "\64\0\1\u0209\31\0\1\u020a\55\0\1\u020b\53\0\1\u020c"+
    "\57\0\1\u020d\75\0\1\u020e\74\0\1\u020f\40\0\1\u0210"+
    "\30\0\1\u0211\102\0\1\u0212\53\0\1\u0213\51\0\1\u0214"+
    "\41\0\1\u0215\70\0\1\u0216\57\0\1\u0217\35\0\1\u0218"+
    "\56\0\1\u0219\77\0\1\u021a\55\0\1\u021b\57\0\1\u021c"+
    "\33\0\1\u021d\55\0\1\u021e\55\0\1\u021f\61\0\1\u0220"+
    "\64\0\1\u0221\67\0\1\u0222\26\0\1\u0223\63\0\1\u0224"+
    "\55\0\1\u0225\55\0\1\u0226\46\0\1\u0227\101\0\1\u0228"+
    "\50\0\1\u0229\63\0\1\u022a\33\0\1\u022b\102\0\1\u022c"+
    "\25\0\1\u022d\56\0\1\u022e\54\0\1\u022f\104\0\1\u0230"+
    "\31\0\1\u0231\53\0\1\u0232\77\0\1\u0233\74\0\1\u0234"+
    "\13\0\1\u0235\102\0\1\u0236\53\0\1\u0237\35\0\1\u0238"+
    "\70\0\1\u0239\57\0\1\u023a\36\0\1\u023b\77\0\1\u023c"+
    "\55\0\1\u023d\35\0\1\u023e\111\0\1\u023f\43\0\1\u0240"+
    "\32\0\1\u0241\72\0\1\u0242\40\0\1\u0243\72\0\1\u0244"+
    "\41\0\1\u0245\100\0\1\u0246\32\0\1\u0247\77\0\1\u0248"+
    "\32\0\1\u0249\60\0\1\u024a\50\0\1\u024b\55\0\1\u024c"+
    "\60\0\1\u024d\55\0\1\u024e\55\0\1\u024f\61\0\1\u0250"+
    "\64\0\1\u0251\67\0\1\u0252\50\0\1\u0253\35\0\1\u0254"+
    "\77\0\1\u0255\32\0\1\u0256\55\0\1\u0257\72\0\1\u0258"+
    "\41\0\1\u0259\100\0\1\u025a\54\0\1\u025b\36\0\1\u025c"+
    "\47\0\1\u025d\100\0\1\u025e\60\0\1\u025f\36\0\1\u0260"+
    "\46\0\1\u0261\114\0\1\u0262\44\0\1\u0263\34\0\1\u0264"+
    "\50\0\1\u0265\55\0\1\u0266\63\0\1\u0267\47\0\1\u0268"+
    "\100\0\1\u0269\60\0\1\u026a\36\0\1\u026b\46\0\1\u026c"+
    "\55\0\1\u026d\55\0\1\u026e\55\0\1\u026f\60\0\1\u0270"+
    "\55\0\1\u0271\44\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  0,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  0,  0, 
     1,  0,  1,  0,  0,  1,  0,  0,  0,  0,  9,  9,  9,  0,  0,  9, 
     9,  0,  0,  0,  1,  9,  0,  0,  9,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0, 
     1,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  9,  0,  9, 
     0,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9,  0,  0,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  9,  9,  0,  0, 
     9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, 
     0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     9,  9,  9,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  1,  0, 
     9,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9, 
     0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  0, 
     9,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  9,  9,  9,  9,  0,  9,  9,  0,  0,  0,  0,  0,  1, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     9,  0,  9,  0,  0,  9,  9,  9,  9,  9,  9,  1,  0,  0,  0,  0, 
     0,  9,  9,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9, 
     9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     9,  9,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  9,  0,  9,  9,  9,  9,  0,  9,  9,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  0, 
     9,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  9, 
     9,  9,  0,  0,  0,  0,  9,  0,  9,  0,  9,  9,  9,  9,  9,  0, 
     0,  9,  0,  0,  9,  9,  0,  0,  0,  0,  9,  0,  0,  9,  9,  0, 
     0,  9,  0,  9,  0,  0,  0,  9,  0,  9,  9,  9,  0,  0,  0,  9, 
     9,  9,  0,  9,  0,  0,  0,  9,  0,  0,  9,  9,  9,  0,  9,  9, 
     9,  0,  9,  9,  9,  9,  9,  9,  0,  9,  9,  9,  0,  9,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[20608];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 577: 
          { return symbolFactory.newSymbol("BGSOUND",BGSOUND); }
        case 626: break;
        case 574: 
          { return symbolFactory.newSymbol("ISINDEX",ISINDEX); }
        case 627: break;
        case 249: 
          { return symbolFactory.newSymbol("varOpen",varOpen); }
        case 628: break;
        case 247: 
          { return symbolFactory.newSymbol("insOpen",insOpen); }
        case 629: break;
        case 241: 
          { return symbolFactory.newSymbol("dirOpen",dirOpen); }
        case 630: break;
        case 240: 
          { return symbolFactory.newSymbol("dfnOpen",dfnOpen); }
        case 631: break;
        case 239: 
          { return symbolFactory.newSymbol("delOpen",delOpen); }
        case 632: break;
        case 238: 
          { return symbolFactory.newSymbol("mapOpen",mapOpen); }
        case 633: break;
        case 220: 
          { return symbolFactory.newSymbol("olClose",olClose); }
        case 634: break;
        case 210: 
          { return symbolFactory.newSymbol("ddClose",ddClose); }
        case 635: break;
        case 209: 
          { return symbolFactory.newSymbol("dlClose",dlClose); }
        case 636: break;
        case 207: 
          { return symbolFactory.newSymbol("dtClose",dtClose); }
        case 637: break;
        case 203: 
          { return symbolFactory.newSymbol("h6Close",h6Close); }
        case 638: break;
        case 202: 
          { return symbolFactory.newSymbol("h5Close",h5Close); }
        case 639: break;
        case 201: 
          { return symbolFactory.newSymbol("h4Close",h4Close); }
        case 640: break;
        case 200: 
          { return symbolFactory.newSymbol("h3Close",h3Close); }
        case 641: break;
        case 199: 
          { return symbolFactory.newSymbol("h2Close",h2Close); }
        case 642: break;
        case 198: 
          { return symbolFactory.newSymbol("h1Close",h1Close); }
        case 643: break;
        case 189: 
          { return symbolFactory.newSymbol("liClose",liClose); }
        case 644: break;
        case 179: 
          { return symbolFactory.newSymbol("ulClose",ulClose); }
        case 645: break;
        case 177: 
          { return symbolFactory.newSymbol("tdClose",tdClose); }
        case 646: break;
        case 176: 
          { return symbolFactory.newSymbol("thClose",thClose); }
        case 647: break;
        case 173: 
          { return symbolFactory.newSymbol("trClose",trClose); }
        case 648: break;
        case 172: 
          { return symbolFactory.newSymbol("ttClose",ttClose); }
        case 649: break;
        case 167: 
          { return symbolFactory.newSymbol("supOpen",supOpen); }
        case 650: break;
        case 166: 
          { return symbolFactory.newSymbol("subOpen",subOpen); }
        case 651: break;
        case 8: 
        case 141: 
          { return symbolFactory.newSymbol("comment", comment); }
        case 652: break;
        case 44: 
          { return symbolFactory.newSymbol("emClose",emClose); }
        case 653: break;
        case 253: 
          { return symbolFactory.newSymbol("bdoOpen",bdoOpen); }
        case 654: break;
        case 254: 
          { return symbolFactory.newSymbol("bigOpen",bigOpen); }
        case 655: break;
        case 264: 
          { return symbolFactory.newSymbol("preOpen",preOpen); }
        case 656: break;
        case 272: 
          { return symbolFactory.newSymbol("xmpOpen",xmpOpen); }
        case 657: break;
        case 274: 
          { return symbolFactory.newSymbol("kbdOpen",kbdOpen); }
        case 658: break;
        case 42: 
          { return symbolFactory.newSymbol("qOpen",qOpen); }
        case 659: break;
        case 37: 
          { return symbolFactory.newSymbol("pOpen",pOpen); }
        case 660: break;
        case 34: 
          { return symbolFactory.newSymbol("bOpen",bOpen); }
        case 661: break;
        case 32: 
          { return symbolFactory.newSymbol("iOpen",iOpen); }
        case 662: break;
        case 27: 
          { return symbolFactory.newSymbol("sOpen",sOpen); }
        case 663: break;
        case 25: 
          { return symbolFactory.newSymbol("aOpen",aOpen); }
        case 664: break;
        case 22: 
          { return symbolFactory.newSymbol("uOpen",uOpen); }
        case 665: break;
        case 12: 
          { return symbolFactory.newSymbol("colon",colon);  }
        case 666: break;
        case 14: 
          { return symbolFactory.newSymbol("comma",comma);  }
        case 667: break;
        case 389: 
          { return symbolFactory.newSymbol("tfoot",tfoot); }
        case 668: break;
        case 391: 
          { return symbolFactory.newSymbol("thead",thead); }
        case 669: break;
        case 393: 
          { return symbolFactory.newSymbol("tbody",tbody); }
        case 670: break;
        case 394: 
          { return symbolFactory.newSymbol("EMBED",EMBED); }
        case 671: break;
        case 401: 
          { return symbolFactory.newSymbol("LABEL",LABEL); }
        case 672: break;
        case 458: 
          { return symbolFactory.newSymbol("input",input); }
        case 673: break;
        case 470: 
          { return symbolFactory.newSymbol("PARAM",PARAM); }
        case 674: break;
        case 536: 
          { return symbolFactory.newSymbol("centerOpen",centerOpen); }
        case 675: break;
        case 529: 
          { return symbolFactory.newSymbol("optionOpen",optionOpen); }
        case 676: break;
        case 528: 
          { return symbolFactory.newSymbol("objectOpen",objectOpen); }
        case 677: break;
        case 523: 
          { return symbolFactory.newSymbol("ilayerOpen",ilayerOpen); }
        case 678: break;
        case 3: 
        case 4: 
        case 5: 
          { return symbolFactory.newSymbol("whitespace", whitespace); }
        case 679: break;
        case 480: 
          { return symbolFactory.newSymbol("appletOpen",appletOpen); }
        case 680: break;
        case 482: 
          { return symbolFactory.newSymbol("legendOpen",legendOpen); }
        case 681: break;
        case 484: 
          { return symbolFactory.newSymbol("strikeOpen",strikeOpen); }
        case 682: break;
        case 485: 
          { return symbolFactory.newSymbol("strongOpen",strongOpen); }
        case 683: break;
        case 486: 
          { return symbolFactory.newSymbol("selectOpen",selectOpen); }
        case 684: break;
        case 487: 
          { return symbolFactory.newSymbol("scriptOpen",scriptOpen); }
        case 685: break;
        case 489: 
          { return symbolFactory.newSymbol("tableClose",tableClose); }
        case 686: break;
        case 490: 
          { return symbolFactory.newSymbol("titleClose",titleClose); }
        case 687: break;
        case 497: 
          { return symbolFactory.newSymbol("layerClose",layerClose); }
        case 688: break;
        case 501: 
          { return symbolFactory.newSymbol("styleClose",styleClose); }
        case 689: break;
        case 503: 
          { return symbolFactory.newSymbol("smallClose",smallClose); }
        case 690: break;
        case 510: 
          { return symbolFactory.newSymbol("blinkClose",blinkClose); }
        case 691: break;
        case 246: 
          { return symbolFactory.newSymbol("img",img); }
        case 692: break;
        case 270: 
          { return symbolFactory.newSymbol("COL",COL); }
        case 693: break;
        case 275: 
          { return symbolFactory.newSymbol("WBR",WBR); }
        case 694: break;
        case 610: 
          { return symbolFactory.newSymbol("COLGROUP",COLGROUP); }
        case 695: break;
        case 142: 
          { return symbolFactory.newSymbol("dfnClose",dfnClose); }
        case 696: break;
        case 285: 
          { return symbolFactory.newSymbol("formOpen",formOpen); }
        case 697: break;
        case 286: 
          { return symbolFactory.newSymbol("fontOpen",fontOpen); }
        case 698: break;
        case 289: 
          { return symbolFactory.newSymbol("abbrOpen",abbrOpen); }
        case 699: break;
        case 302: 
          { return symbolFactory.newSymbol("spanOpen",spanOpen); }
        case 700: break;
        case 320: 
          { return symbolFactory.newSymbol("subClose",subClose); }
        case 701: break;
        case 321: 
          { return symbolFactory.newSymbol("supClose",supClose); }
        case 702: break;
        case 331: 
          { return symbolFactory.newSymbol("mapClose",mapClose); }
        case 703: break;
        case 332: 
          { return symbolFactory.newSymbol("delClose",delClose); }
        case 704: break;
        case 333: 
          { return symbolFactory.newSymbol("dirClose",dirClose); }
        case 705: break;
        case 336: 
          { return symbolFactory.newSymbol("insClose",insClose); }
        case 706: break;
        case 337: 
          { return symbolFactory.newSymbol("varClose",varClose); }
        case 707: break;
        case 341: 
          { return symbolFactory.newSymbol("bdoClose",bdoClose); }
        case 708: break;
        case 342: 
          { return symbolFactory.newSymbol("bigClose",bigClose); }
        case 709: break;
        case 350: 
          { return symbolFactory.newSymbol("preClose",preClose); }
        case 710: break;
        case 355: 
          { return symbolFactory.newSymbol("xmpClose",xmpClose); }
        case 711: break;
        case 356: 
          { return symbolFactory.newSymbol("kbdClose",kbdClose); }
        case 712: break;
        case 357: 
          { return symbolFactory.newSymbol("htmlOpen",htmlOpen); }
        case 713: break;
        case 358: 
          { return symbolFactory.newSymbol("headOpen",headOpen); }
        case 714: break;
        case 361: 
          { return symbolFactory.newSymbol("menuOpen",menuOpen); }
        case 715: break;
        case 370: 
          { return symbolFactory.newSymbol("bodyOpen",bodyOpen); }
        case 716: break;
        case 379: 
          { return symbolFactory.newSymbol("nobrOpen",nobrOpen); }
        case 717: break;
        case 384: 
          { return symbolFactory.newSymbol("citeOpen",citeOpen); }
        case 718: break;
        case 386: 
          { return symbolFactory.newSymbol("codeOpen",codeOpen); }
        case 719: break;
        case 624: 
          { return symbolFactory.newSymbol("blockquoteClose",blockquoteClose); }
        case 720: break;
        case 583: 
          { return symbolFactory.newSymbol("captionOpen",captionOpen); }
        case 721: break;
        case 579: 
          { return symbolFactory.newSymbol("noembedOpen",noembedOpen); }
        case 722: break;
        case 573: 
          { return symbolFactory.newSymbol("marqueeOpen",marqueeOpen); }
        case 723: break;
        case 570: 
          { return symbolFactory.newSymbol("centerClose",centerClose); }
        case 724: break;
        case 565: 
          { return symbolFactory.newSymbol("optionClose",optionClose); }
        case 725: break;
        case 564: 
          { return symbolFactory.newSymbol("objectClose",objectClose); }
        case 726: break;
        case 561: 
          { return symbolFactory.newSymbol("ilayerClose",ilayerClose); }
        case 727: break;
        case 558: 
          { return symbolFactory.newSymbol("scriptClose",scriptClose); }
        case 728: break;
        case 556: 
          { return symbolFactory.newSymbol("selectClose",selectClose); }
        case 729: break;
        case 555: 
          { return symbolFactory.newSymbol("strongClose",strongClose); }
        case 730: break;
        case 554: 
          { return symbolFactory.newSymbol("strikeClose",strikeClose); }
        case 731: break;
        case 552: 
          { return symbolFactory.newSymbol("legendClose",legendClose); }
        case 732: break;
        case 550: 
          { return symbolFactory.newSymbol("appletClose",appletClose); }
        case 733: break;
        case 545: 
          { return symbolFactory.newSymbol("listingOpen",listingOpen); }
        case 734: break;
        case 544: 
          { return symbolFactory.newSymbol("acronymOpen",acronymOpen); }
        case 735: break;
        case 543: 
          { return symbolFactory.newSymbol("addressOpen",addressOpen); }
        case 736: break;
        case 287: 
          { return symbolFactory.newSymbol("AREA",AREA); }
        case 737: break;
        case 296: 
          { return symbolFactory.newSymbol("LINK",LINK); }
        case 738: break;
        case 360: 
          { return symbolFactory.newSymbol("META",META); }
        case 739: break;
        case 367: 
          { return symbolFactory.newSymbol("BASE",BASE); }
        case 740: break;
        case 623: 
          { return symbolFactory.newSymbol("blockquoteOpen",blockquoteOpen); }
        case 741: break;
        case 621: 
          { return symbolFactory.newSymbol("plainText",plainText); }
        case 742: break;
        case 0: 
        case 6: 
        case 7: 
          { return symbolFactory.newSymbol("plainText", plainText); }
        case 743: break;
        case 13: 
          { return symbolFactory.newSymbol("semicolon",semicolon);  }
        case 744: break;
        case 390: 
          { return symbolFactory.newSymbol("tableOpen",tableOpen); }
        case 745: break;
        case 392: 
          { return symbolFactory.newSymbol("titleOpen",titleOpen); }
        case 746: break;
        case 395: 
          { return symbolFactory.newSymbol("frameOpen",frameOpen); }
        case 747: break;
        case 402: 
          { return symbolFactory.newSymbol("layerOpen",layerOpen); }
        case 748: break;
        case 406: 
          { return symbolFactory.newSymbol("styleOpen",styleOpen); }
        case 749: break;
        case 408: 
          { return symbolFactory.newSymbol("smallOpen",smallOpen); }
        case 750: break;
        case 415: 
          { return symbolFactory.newSymbol("formClose",formClose); }
        case 751: break;
        case 416: 
          { return symbolFactory.newSymbol("fontClose",fontClose); }
        case 752: break;
        case 418: 
          { return symbolFactory.newSymbol("abbrClose",abbrClose); }
        case 753: break;
        case 429: 
          { return symbolFactory.newSymbol("spanClose",spanClose); }
        case 754: break;
        case 432: 
          { return symbolFactory.newSymbol("htmlClose",htmlClose); }
        case 755: break;
        case 433: 
          { return symbolFactory.newSymbol("headClose",headClose); }
        case 756: break;
        case 435: 
          { return symbolFactory.newSymbol("menuClose",menuClose); }
        case 757: break;
        case 441: 
          { return symbolFactory.newSymbol("bodyClose",bodyClose); }
        case 758: break;
        case 448: 
          { return symbolFactory.newSymbol("nobrClose",nobrClose); }
        case 759: break;
        case 451: 
          { return symbolFactory.newSymbol("citeClose",citeClose); }
        case 760: break;
        case 452: 
          { return symbolFactory.newSymbol("codeClose",codeClose); }
        case 761: break;
        case 460: 
          { return symbolFactory.newSymbol("blinkOpen",blinkOpen); }
        case 762: break;
        case 557: 
          { return symbolFactory.newSymbol("SPACER",SPACER); }
        case 763: break;
        case 539: 
          { return symbolFactory.newSymbol("KEYGEN",KEYGEN); }
        case 764: break;
        case 531: 
          { return symbolFactory.newSymbol("NEXTID",NEXTID); }
        case 765: break;
        case 522: 
          { return symbolFactory.newSymbol("IFRAME",IFRAME); }
        case 766: break;
        case 225: 
          { return symbolFactory.newSymbol("pClose",pClose); }
        case 767: break;
        case 125: 
          { return symbolFactory.newSymbol("olOpen",olOpen); }
        case 768: break;
        case 110: 
          { return symbolFactory.newSymbol("ddOpen",ddOpen); }
        case 769: break;
        case 109: 
          { return symbolFactory.newSymbol("dlOpen",dlOpen); }
        case 770: break;
        case 106: 
          { return symbolFactory.newSymbol("dtOpen",dtOpen); }
        case 771: break;
        case 102: 
          { return symbolFactory.newSymbol("h6Open",h6Open); }
        case 772: break;
        case 101: 
          { return symbolFactory.newSymbol("h5Open",h5Open); }
        case 773: break;
        case 100: 
          { return symbolFactory.newSymbol("h4Open",h4Open); }
        case 774: break;
        case 43: 
          { return symbolFactory.newSymbol("assign",assign);  }
        case 775: break;
        case 10: 
          { return symbolFactory.newSymbol("endTag",endTag); }
        case 776: break;
        case 47: 
          { return symbolFactory.newSymbol("ttOpen",ttOpen); }
        case 777: break;
        case 48: 
          { return symbolFactory.newSymbol("trOpen",trOpen); }
        case 778: break;
        case 52: 
          { return symbolFactory.newSymbol("thOpen",thOpen); }
        case 779: break;
        case 53: 
          { return symbolFactory.newSymbol("tdOpen",tdOpen); }
        case 780: break;
        case 56: 
          { return symbolFactory.newSymbol("ulOpen",ulOpen); }
        case 781: break;
        case 57: 
          { return symbolFactory.newSymbol("emOpen",emOpen); }
        case 782: break;
        case 68: 
          { return symbolFactory.newSymbol("liOpen",liOpen); }
        case 783: break;
        case 76: 
          { return symbolFactory.newSymbol("uClose",uClose); }
        case 784: break;
        case 78: 
          { return symbolFactory.newSymbol("aClose",aClose); }
        case 785: break;
        case 80: 
          { return symbolFactory.newSymbol("sClose",sClose); }
        case 786: break;
        case 84: 
          { return symbolFactory.newSymbol("iClose",iClose); }
        case 787: break;
        case 86: 
          { return symbolFactory.newSymbol("bClose",bClose); }
        case 788: break;
        case 93: 
          { return symbolFactory.newSymbol("qClose",qClose); }
        case 789: break;
        case 97: 
          { return symbolFactory.newSymbol("h1Open",h1Open); }
        case 790: break;
        case 98: 
          { return symbolFactory.newSymbol("h2Open",h2Open); }
        case 791: break;
        case 99: 
          { return symbolFactory.newSymbol("h3Open",h3Open); }
        case 792: break;
        case 118: 
          { return symbolFactory.newSymbol("br",br); }
        case 793: break;
        case 95: 
          { return symbolFactory.newSymbol("hr",hr); }
        case 794: break;
        case 608: 
          { return symbolFactory.newSymbol("noscriptOpen",noscriptOpen); }
        case 795: break;
        case 607: 
          { return symbolFactory.newSymbol("noframesOpen",noframesOpen); }
        case 796: break;
        case 606: 
          { return symbolFactory.newSymbol("optgroupOpen",optgroupOpen); }
        case 797: break;
        case 604: 
          { return symbolFactory.newSymbol("basefontOpen",basefontOpen); }
        case 798: break;
        case 603: 
          { return symbolFactory.newSymbol("multicolOpen",multicolOpen); }
        case 799: break;
        case 602: 
          { return symbolFactory.newSymbol("captionClose",captionClose); }
        case 800: break;
        case 599: 
          { return symbolFactory.newSymbol("noembedClose",noembedClose); }
        case 801: break;
        case 595: 
          { return symbolFactory.newSymbol("marqueeClose",marqueeClose); }
        case 802: break;
        case 593: 
          { return symbolFactory.newSymbol("listingClose",listingClose); }
        case 803: break;
        case 592: 
          { return symbolFactory.newSymbol("acronymClose",acronymClose); }
        case 804: break;
        case 591: 
          { return symbolFactory.newSymbol("addressClose",addressClose); }
        case 805: break;
        case 587: 
          { return symbolFactory.newSymbol("fieldsetOpen",fieldsetOpen); }
        case 806: break;
        case 586: 
          { return symbolFactory.newSymbol("framesetOpen",framesetOpen); }
        case 807: break;
        case 585: 
          { return symbolFactory.newSymbol("textareaOpen",textareaOpen); }
        case 808: break;
        case 242: 
          { return symbolFactory.newSymbol("divisionOpen",divisionOpen); }
        case 809: break;
        case 619: 
          { return symbolFactory.newSymbol("noscriptClose",noscriptClose); }
        case 810: break;
        case 618: 
          { return symbolFactory.newSymbol("noframesClose",noframesClose); }
        case 811: break;
        case 617: 
          { return symbolFactory.newSymbol("optgroupClose",optgroupClose); }
        case 812: break;
        case 615: 
          { return symbolFactory.newSymbol("basefontClose",basefontClose); }
        case 813: break;
        case 614: 
          { return symbolFactory.newSymbol("multicolClose",multicolClose); }
        case 814: break;
        case 613: 
          { return symbolFactory.newSymbol("fieldsetClose",fieldsetClose); }
        case 815: break;
        case 612: 
          { return symbolFactory.newSymbol("framesetClose",framesetClose); }
        case 816: break;
        case 611: 
          { return symbolFactory.newSymbol("textareaClose",textareaClose); }
        case 817: break;
        case 16: 
          { return symbolFactory.newSymbol("IVAL", IVAL, Float.parseFloat(yytext())); }
        case 818: break;
        case 2: 
        case 9: 
        case 11: 
        case 15: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 819: break;
        case 334: 
          { return symbolFactory.newSymbol("divisionClose",divisionClose); }
        case 820: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
